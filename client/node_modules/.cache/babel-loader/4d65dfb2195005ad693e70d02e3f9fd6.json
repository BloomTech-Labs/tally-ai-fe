{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Raudel Flores\\\\Documents\\\\Lambda-School\\\\LABS\\\\tally\\\\tally-ai-fe\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Raudel Flores\\\\Documents\\\\Lambda-School\\\\LABS\\\\tally\\\\tally-ai-fe\\\\client\\\\src\\\\components\\\\WidgetSystem\\\\WidgetThumbnail.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { getWidgetPreviewFromName } from \"./WidgetRegistry\";\nimport { setActiveWidgets } from \"../../actions/index\";\nimport { connect } from \"react-redux\";\nimport Hovered from \"../../images/PreviewHovered.png\";\nimport Selected from \"../../images/PreviewSelected.png\"; //It's like WidgetContainer but it renders a preview instead of the actual widget\n\nconst WidgetThumbnail = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        selected = _useState2[0],\n        setSelected = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        hovered = _useState4[0],\n        setHovered = _useState4[1];\n\n  function getSelectedClass() {\n    if (selected) {\n      return \"Selected\";\n    } else {\n      return \"\";\n    }\n  }\n\n  useEffect(() => {\n    if (props.activeWidgets.includes(props.widgetName)) {\n      //this widget is in activeWidgets, that means we're selected\n      setSelected(true);\n    } else {\n      setSelected(false);\n    }\n  }, [props.activeWidgets]);\n  return React.createElement(\"div\", {\n    id: props.widgetName + \"Thumbnail\",\n    className: \"widgetThumbnail\" + getSelectedClass(),\n    onClick: () => {\n      if (!selected) {\n        //add since it's selected now:\n        props.setActiveWidgets([...props.activeWidgets, props.widgetName]);\n      } else {\n        //remove\n        props.setActiveWidgets(props.activeWidgets.filter(name => props.widgetName != name));\n      }\n    },\n    onMouseOver: () => {\n      setHovered(true);\n    },\n    onMouseLeave: () => {\n      setHovered(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, getWidgetPreviewFromName(props.widgetName));\n};\n\nconst mapStateToProps = state => ({\n  activeWidgets: state.activeWidgets\n});\n\nexport default connect(mapStateToProps, {\n  setActiveWidgets\n})(WidgetThumbnail);","map":{"version":3,"sources":["C:/Users/Raudel Flores/Documents/Lambda-School/LABS/tally/tally-ai-fe/client/src/components/WidgetSystem/WidgetThumbnail.js"],"names":["React","useState","useEffect","getWidgetPreviewFromName","setActiveWidgets","connect","Hovered","Selected","WidgetThumbnail","props","selected","setSelected","hovered","setHovered","getSelectedClass","activeWidgets","includes","widgetName","filter","name","mapStateToProps","state"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,SAASC,wBAAT,QAAyC,kBAAzC;AAEA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,QAAP,MAAqB,kCAArB,C,CAEA;;AACA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAAA,oBACCR,QAAQ,CAAC,KAAD,CADT;AAAA;AAAA,QACxBS,QADwB;AAAA,QACdC,WADc;;AAAA,qBAEDV,QAAQ,CAAC,KAAD,CAFP;AAAA;AAAA,QAExBW,OAFwB;AAAA,QAEfC,UAFe;;AAI/B,WAASC,gBAAT,GAA4B;AAC1B,QAAIJ,QAAJ,EAAc;AACZ,aAAO,UAAP;AACD,KAFD,MAEO;AACL,aAAO,EAAP;AACD;AACF;;AAEDR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIO,KAAK,CAACM,aAAN,CAAoBC,QAApB,CAA6BP,KAAK,CAACQ,UAAnC,CAAJ,EAAoD;AAClD;AACAN,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAHD,MAGO;AACLA,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,GAPQ,EAON,CAACF,KAAK,CAACM,aAAP,CAPM,CAAT;AASA,SACE;AACE,IAAA,EAAE,EAAEN,KAAK,CAACQ,UAAN,GAAmB,WADzB;AAEE,IAAA,SAAS,EAAE,oBAAoBH,gBAAgB,EAFjD;AAGE,IAAA,OAAO,EAAE,MAAM;AACb,UAAI,CAACJ,QAAL,EAAe;AACb;AACAD,QAAAA,KAAK,CAACL,gBAAN,CAAuB,CAAC,GAAGK,KAAK,CAACM,aAAV,EAAyBN,KAAK,CAACQ,UAA/B,CAAvB;AACD,OAHD,MAGO;AACL;AACAR,QAAAA,KAAK,CAACL,gBAAN,CACEK,KAAK,CAACM,aAAN,CAAoBG,MAApB,CAA2BC,IAAI,IAAIV,KAAK,CAACQ,UAAN,IAAoBE,IAAvD,CADF;AAGD;AACF,KAbH;AAcE,IAAA,WAAW,EAAE,MAAM;AACjBN,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD,KAhBH;AAiBE,IAAA,YAAY,EAAE,MAAM;AAClBA,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAnBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAqBGV,wBAAwB,CAACM,KAAK,CAACQ,UAAP,CArB3B,CADF;AAyBD,CA9CD;;AAgDA,MAAMG,eAAe,GAAGC,KAAK,KAAK;AAChCN,EAAAA,aAAa,EAAEM,KAAK,CAACN;AADW,CAAL,CAA7B;;AAIA,eAAeV,OAAO,CAACe,eAAD,EAAkB;AAAEhB,EAAAA;AAAF,CAAlB,CAAP,CAA+CI,eAA/C,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nimport { getWidgetPreviewFromName } from \"./WidgetRegistry\";\r\n\r\nimport { setActiveWidgets } from \"../../actions/index\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport Hovered from \"../../images/PreviewHovered.png\";\r\nimport Selected from \"../../images/PreviewSelected.png\";\r\n\r\n//It's like WidgetContainer but it renders a preview instead of the actual widget\r\nconst WidgetThumbnail = props => {\r\n  const [selected, setSelected] = useState(false);\r\n  const [hovered, setHovered] = useState(false);\r\n\r\n  function getSelectedClass() {\r\n    if (selected) {\r\n      return \"Selected\";\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (props.activeWidgets.includes(props.widgetName)) {\r\n      //this widget is in activeWidgets, that means we're selected\r\n      setSelected(true);\r\n    } else {\r\n      setSelected(false);\r\n    }\r\n  }, [props.activeWidgets]);\r\n\r\n  return (\r\n    <div\r\n      id={props.widgetName + \"Thumbnail\"}\r\n      className={\"widgetThumbnail\" + getSelectedClass()}\r\n      onClick={() => {\r\n        if (!selected) {\r\n          //add since it's selected now:\r\n          props.setActiveWidgets([...props.activeWidgets, props.widgetName]);\r\n        } else {\r\n          //remove\r\n          props.setActiveWidgets(\r\n            props.activeWidgets.filter(name => props.widgetName != name)\r\n          );\r\n        }\r\n      }}\r\n      onMouseOver={() => {\r\n        setHovered(true);\r\n      }}\r\n      onMouseLeave={() => {\r\n        setHovered(false);\r\n      }}\r\n    >\r\n      {getWidgetPreviewFromName(props.widgetName)}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  activeWidgets: state.activeWidgets\r\n});\r\n\r\nexport default connect(mapStateToProps, { setActiveWidgets })(WidgetThumbnail);\r\n"]},"metadata":{},"sourceType":"module"}