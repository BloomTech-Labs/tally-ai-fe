{"ast":null,"code":"import _objectSpread from \"/Users/benkoehler/Desktop/Labs/tally-ai-fe/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { axiosWithYelpAuth } from \"../auth/axiosWithYelpAuth\";\nimport { axiosWithAuth } from \"../auth/axiosWithAuth\";\nimport axios from \"axios\";\n/*\n  ------------ \n  ACTION TYPES \n  ------------\n*/\n// Yelp Business Search\n\nexport const FETCH_BUSINESS_START = \"FETCH_BUSINESS_START\";\nexport const FETCH_BUSINESS_SUCCESS = \"FETCH_BUSINESS_SUCCESS\";\nexport const FETCH_BUSINESS_FAILURE = \"FETCH_BUSINESS_FAILURE\"; // Select business and add info to the store\n\nexport const SELECT_BUSINESS_START = \"SELECT_BUSINESS_START\";\nexport const SELECT_BUSINESS_SUCCESS = \"SELECT_BUSINESS_SUCCESS\";\nexport const SELECT_BUSINESS_FAILURE = \"SELECT_BUSINESS_FAILURE\"; //adding businesses to user's owned businesses list\n\nexport const ADD_BUSINESS_START = \"ADD_BUSINESS_START\";\nexport const ADD_BUSINESS_SUCCESS = \"ADD_BUSINESS_SUCCESS\";\nexport const ADD_BUSINESS_FAILURE = \"ADD_BUSINESS_FAILURE\"; //removing businesses from user's owned businesses list\n\nexport const REMOVE_BUSINESS_START = \"REMOVE_BUSINESS_START\";\nexport const REMOVE_BUSINESS_SUCCESS = \"REMOVE_BUSINESS_SUCCESS\";\nexport const REMOVE_BUSINESS_FAILURE = \"REMOVE_BUSINESS_FAILURE\"; //adding competitors to user's competitor list\n\nexport const ADD_COMPETITOR_START = \"ADD_COMPETITOR_START\";\nexport const ADD_COMPETITOR_SUCCESS = \"ADD_COMPETITOR_SUCCESS\";\nexport const ADD_COMPETITOR_FAILURE = \"ADD_COMPETITOR_FAILURE\"; //removing competitors from user's competitor list\n\nexport const REMOVE_COMPETITOR_START = \"REMOVE_COMPETITOR_START\";\nexport const REMOVE_COMPETITOR_SUCCESS = \"REMOVE_COMPETITOR_SUCCESS\";\nexport const REMOVE_COMPETITOR_FAILURE = \"REMOVE_COMPETITOR_FAILURE\"; // TopBottomWords\n\nexport const FETCH_TOP_AND_BOTTOM_START = \"FETCH_TOP_AND_BOTTOM_START\";\nexport const FETCH_TOP_AND_BOTTOM_SUCCESS = \"FETCH_TOP_AND_BOTTOM_SUCCESS\";\nexport const FETCH_TOP_AND_BOTTOM_FAILURE = \"FETCH_TOP_AND_BOTTOM_FAILURE\"; // ReviewFrequency\n\nexport const FETCH_RATING_OVER_TIME_START = \"FETCH_RATING_OVER_TIME_START\";\nexport const FETCH_RATING_OVER_TIME_SUCCESS = \"FETCH_RATING_OVER_TIME_SUCCESS\";\nexport const FETCH_RATING_OVER_TIME_FAILURE = \"FETCH_RATING_OVER_TIME_FAILURE\"; // Registration\n// export const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\n// export const REGISTER_FAILURE = \"REGISTER_FAILURE\";\n// export const REGISTER_START = \"REGISTER_START\";\n// // Login\n// export const LOGIN_START = \"LOGIN_START\";\n// export const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\n// export const LOGIN_FAILURE = \"LOGIN_FAILURE\";\n// Logout\n// export const LOGOUT_USER = \"LOGOUT_USER\";\n\nexport const UPDATE_LOGGED_IN_USER = \"UPDATE_LOGGED_IN_USER\"; // Edit Account\n\nexport const FETCH_EDITACCOUNT_START = \"FETCH_EDITACCOUNT_START\";\nexport const FETCH_EDITACCOUNT_SUCCESS = \"FETCH_EDITACCOUNT_SUCCESS\";\nexport const FETCH_EDITACCOUNT_FAILURE = \"FETCH_EDITACCOUNT_FAILURE\"; // PhraseRank\n\nexport const FETCH_WORDS_OVER_TIME_START = \"FETCH_WORDS_OVER_TIME_START\";\nexport const FETCH_WORDS_OVER_TIME_SUCCESS = \"FETCH_WORDS_OVER_TIME_SUCCESS\";\nexport const FETCH_WORDS_OVER_TIME_FAILURE = \"FETCH_WORDS_OVER_TIME_FAILURE\"; // ReviewFrequency\n\nexport const FETCH_REVIEWS_OVER_TIME_START = \"FETCH_REVIEWS_OVER_TIME_START\";\nexport const FETCH_REVIEWS_OVER_TIME_SUCCESS = \"FETCH_REVIEWS_OVER_TIME_SUCCESS\";\nexport const FETCH_REVIEWS_OVER_TIME_FAILURE = \"FETCH_REVIEWS_OVER_TIME_FAILURE\";\nexport const SET_ACTIVE_WIDGETS = \"SET_ACTIVE_WIDGETS\";\nexport const SET_TABS_START = \"SET_TABS_START\";\nexport const SET_TABS_FAILURE = \"SET_TABS_FAILURE\";\nexport const SET_TABS_SUCCESS = \"SET_TABS_SUCCESS\";\nexport const SET_FAVORITES_START = \"SET_FAVORITES_START\";\nexport const SET_FAVORITES_FAILURE = \"SET_FAVORITES_FAILURE\";\nexport const SET_FAVORITES_SUCCESS = \"SET_FAVORITES_SUCCESS\";\nexport const ADD_FAVORITE_START = \"ADD_FAVORITE_START\";\nexport const ADD_FAVORITE_FAILURE = \"ADD_FAVORITE_FAILURE\";\nexport const ADD_FAVORITE_SUCCESS = \"ADD_FAVORITE_SUCCESS\";\nexport const REMOVE_FAVORITE_START = \"REMOVE_FAVORITE_START\";\nexport const REMOVE_FAVORITE_FAILURE = \"REMOVE_FAVORITE_FAILURE\";\nexport const REMOVE_FAVORITE_SUCCESS = \"REMOVE_FAVORITE_SUCCESS\";\nexport const GET_USER_DATA_SUCCESS = \"GET_USER_DATA_SUCCESS\";\nexport const GET_USER_DATA_START = \"GET_USER_DATA_START\";\nexport const UPDATE_YELP_DATA_START = \"UPDATE_YELP_DATA_START\";\nexport const UPDATE_YELP_DATA_SUCCESS = \"UPDATE_YELP_DATA_SUCCESS\";\nexport const UPDATE_YELP_DATA_FAILURE = \"UPDATE_YELP_DATA_FAILURE\";\nexport const FETCH_RADAR_START = \"FETCH_RADAR_START\";\nexport const FETCH_RADAR_SUCCESS = \"FETCH_RADAR_SUCCESS\";\nexport const FETCH_RADAR_FAILURE = \"FETCH_RADAR_FAILURE\";\n/*\n  -------\n  ACTIONS\n  -------\n*/\n// Yelp Business Search\n\nexport const fetchBusinesses = business => dispatch => {\n  console.log(\"action business query\", business);\n  const name = business.name;\n  let location; // Check for type of location provided - coords or phrase (ie city, state, etc)?\n\n  if (business.location.latitude && business.location.longitude) {\n    location = `latitude=${business.location.latitude}&longitude=${business.location.longitude}`;\n  } else if (business.location) {\n    location = `location=${business.location}`;\n  } else {\n    dispatch({\n      type: FETCH_BUSINESS_FAILURE,\n      payload: \"Business location required\"\n    });\n  } // Dynamically generate endpoint using provided location and name\n\n\n  const yelpSearchEndpoint = `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${name}&${location}`; //I've tried like a million different solutions from Google to get this to work without a 403 and a CORS error, maybe someone else has ideas cause I give up\n\n  dispatch({\n    type: FETCH_BUSINESS_START\n  });\n  console.log(\"Yelp API URL: \", yelpSearchEndpoint);\n  axiosWithYelpAuth().get(yelpSearchEndpoint).then(res => {\n    dispatch({\n      type: FETCH_BUSINESS_SUCCESS,\n      payload: res.data.businesses\n    });\n  }).catch(err => {\n    dispatch({\n      type: FETCH_BUSINESS_FAILURE,\n      payload: err\n    });\n  });\n};\nexport const setActiveWidgets = widgetArray => dispatch => {\n  dispatch({\n    type: SET_ACTIVE_WIDGETS,\n    payload: widgetArray\n  });\n};\nexport const setActiveTabs = (oldTabsArray, newTabsArray, userID) => dispatch => {\n  console.log(\"Setting tabs on back end to \", newTabsArray);\n  dispatch({\n    type: SET_TABS_START,\n    payload: newTabsArray\n  }); //predict that the request will be successful and update state immediatly so the user doesn't have to wait\n\n  axiosWithAuth().put(\"/users/\" + userID, {\n    preferences: {\n      activeTabs: newTabsArray\n    }\n  }).then(res => console.log(\"TABS SET, RESULT: \", res) & dispatch({\n    type: SET_TABS_SUCCESS\n  })).catch(err => dispatch({\n    type: SET_TABS_FAILURE,\n    payload: oldTabsArray\n  })); //revert to old array if an error occurs\n}; // TopBottomWords\n\nexport const fetchTopAndBottom = id => dispatch => {\n  const dsEndpoint = `https://cors-anywhere.herokuapp.com/http://django-tally.nv9fjcsgss.us-west-2.elasticbeanstalk.com/yelp/${id}?viztype=0`;\n  console.log(\"Running fetchTopAndBottom.\");\n  dispatch({\n    type: FETCH_TOP_AND_BOTTOM_START\n  });\n  axios.get(dsEndpoint).then(res => {\n    dispatch({\n      type: FETCH_TOP_AND_BOTTOM_SUCCESS,\n      payload: res\n    });\n  }).catch(err => {\n    dispatch({\n      type: FETCH_TOP_AND_BOTTOM_FAILURE,\n      payload: err\n    });\n  });\n}; // Select business and add info to the store at state.businessInfo\n\nexport const selectBusiness = (previousBusinessInfo, businessInfo) => dispatch => {\n  if (businessInfo) {\n    //only request yelp data if both previous and new info are provided. This is useful while selecting new tabs\n    console.error(\"SECOND PARAMETER PROVIDED, not selecting new tab, params: \", previousBusinessInfo, businessInfo);\n    dispatch({\n      type: SELECT_BUSINESS_START,\n      payload: businessInfo\n    }); //Predict that the selection will be successful by setting currentlySelectedBusiness immediatly, so that the user doesn't need to wait until address/rating info is gotten\n\n    axiosWithYelpAuth().get(\"https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/\" + businessInfo.businessId).then(res => {\n      dispatch({\n        type: SELECT_BUSINESS_SUCCESS,\n        payload: _objectSpread({}, businessInfo, {\n          address: res.data.location.display_address,\n          reviewCount: res.data.review_count,\n          averageRating: res.data.rating\n        })\n      });\n    }).catch(err => {\n      dispatch({\n        type: SELECT_BUSINESS_FAILURE,\n        payload: previousBusinessInfo //revert back!\n\n      });\n    });\n  } else {\n    dispatch({\n      type: SELECT_BUSINESS_SUCCESS,\n      payload: previousBusinessInfo\n    });\n  }\n\n  console.log(\"\\nAdding business selection to the store...\\n\");\n}; // export const fetchBusinessData = id => dispatch => {\n//   console.log(`\\nFetching business data for business ID ${id}\\n`);\n//   // dispatch \n// }\n// Select business and add info to the store at state.businessInfo\n\nexport const addBusiness = (businessInfo, userID) => dispatch => {\n  console.log(\"business in addBusiness: \", businessInfo); // businessInfo must be in this format\n  //   {\n  //     \"name\": string,\n  //     \"city\": string,\n  //     \"state\": string,\n  //     \"yelp\": {\n  //         \"id\": string,\n  //         \"yelp_id\": string,\n  //         \"url\": string,\n  //         \"image_url\": string\n  //     }\n  // }\n\n  let backendFormat = {\n    name: businessInfo.businessName,\n    city: businessInfo.city,\n    state: businessInfo.state,\n    yelp: {\n      yelp_id: businessInfo.businessId,\n      url: businessInfo.url,\n      image_url: businessInfo.image_url\n    }\n  };\n  console.log(\"\\nAdding business to the store...\\n\", backendFormat, businessInfo); //   businessId: \"aC1dn3qBFxgk-OYC3hFMgQ\"\n  // businessName: \"In The Bowl\"\n  // businessImg: \"https://s3-media1.fl.yelpcdn.com/bphoto/NpaN9bQ0YsJfI6fEVL5_Qg/o.jpg\"\n  // reviewCount: 709\n  // averageRating: 4\n  // changeInRating: \"\"\n  // url: \"https://www.yelp.com/biz/in-the-bowl-seattle-2?adjust_creative=qO78hV4p7yy-o3z8K5osow&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=qO78hV4p7yy-o3z8K5osow\"\n  // image_url: \"https://s3-media1.fl.yelpcdn.com/bphoto/NpaN9bQ0YsJfI6fEVL5_Qg/o.jpg\"\n  // city: \"Seattle\"\n  // state: \"WA\"\n\n  dispatch({\n    type: ADD_BUSINESS_START\n  }); //endpoint\n\n  axiosWithAuth().post(`/users/${userID}/business`, backendFormat).then(res => {\n    dispatch({\n      type: ADD_BUSINESS_SUCCESS,\n      payload: res.data //new array after modification\n\n    });\n  }).catch(err => {\n    dispatch({\n      type: ADD_BUSINESS_FAILURE,\n      payload: err\n    });\n  });\n}; // Select business and add info to the store at state.businessInfo\n\nexport const removeBusiness = (businessID, userID) => dispatch => {\n  console.log(\"\\removing business from the store...\\n\"); //dispatch({ type: REMOVE_BUSINESS_START, payload: businessInfo });\n  //DELETE /users/:id/business/:business_id\n\n  dispatch({\n    type: REMOVE_BUSINESS_START\n  }); //endpoint\n\n  axiosWithAuth().delete(`/users/${userID}/business/${businessID}`).then(res => {\n    dispatch({\n      type: REMOVE_BUSINESS_SUCCESS,\n      payload: res.data //new array after modification\n\n    });\n  }).catch(err => {\n    dispatch({\n      type: REMOVE_BUSINESS_FAILURE,\n      payload: err\n    });\n  });\n}; // Select business and add info to the store at state.businessInfo\n\nexport const addCompetitor = (businessInfo, userID) => dispatch => {\n  console.log(\"\\nAdding competitor to the store...\\n\"); //dispatch({ type: ADD_BUSINESS, payload: businessInfo });\n\n  let backendFormat = {\n    name: businessInfo.businessName,\n    city: businessInfo.city,\n    state: businessInfo.state,\n    yelp: {\n      yelp_id: businessInfo.businessId,\n      url: businessInfo.url,\n      image_url: businessInfo.image_url\n    }\n  };\n  console.log(\"Add competitor start, data:\", backendFormat);\n  dispatch({\n    type: ADD_COMPETITOR_START\n  }); //endpoint\n\n  axiosWithAuth().post(`/users/${userID}/favorite`, backendFormat).then(res => {\n    console.log(\"Add competitor success, result:\", res);\n    dispatch({\n      type: ADD_COMPETITOR_SUCCESS,\n      payload: res.data //new array after modification\n\n    });\n  }).catch(err => {\n    dispatch({\n      type: ADD_COMPETITOR_FAILURE,\n      payload: err\n    });\n  }); //POST /users/:id/favorite\n}; // Select business and add info to the store at state.businessInfo\n\nexport const removeCompetitor = (businessID, userID) => dispatch => {\n  console.log(\"\\Removing competitor from the store...\\n\");\n  dispatch({\n    type: REMOVE_COMPETITOR_START\n  }); //endpoint\n\n  axiosWithAuth().delete(`/users/${userID}/favorite/${businessID}`).then(res => {\n    dispatch({\n      type: REMOVE_COMPETITOR_SUCCESS,\n      payload: res.data //new array after modification\n\n    });\n  }).catch(err => {\n    dispatch({\n      type: REMOVE_COMPETITOR_FAILURE,\n      payload: err\n    });\n  }); //dispatch({ type: ADD_BUSINESS, payload: businessInfo });\n  //DELETE /users/:id/favorite/:business_id\n};\nexport const searchResultsPlaceholder = results => dispatch => {\n  console.log(\"searchResultsPlaceholder action working\");\n  dispatch({\n    type: FETCH_BUSINESS_SUCCESS,\n    payload: results\n  });\n}; // // Used at Registration\n// export const registerUser = newUser => dispatch => {\n//   console.log(\"User info: \", newUser);\n//   dispatch({ type: REGISTER_START })\n//   axios\n//     .post(`https://tally-ai.herokuapp.com/api/auth/register`, newUser) //swap local host with https://tally-ai.herokuapp.com/api/auth/register\n//     .then(\n//       res => {\n//         localStorage.setItem(\"token\", res.data.token);\n//         localStorage.setItem(\"userID\", res.data.userN.id);\n//         dispatch({ type: REGISTER_SUCCESS, payload: res.data.userN.id });\n//         console.log(res.data, \"fetchAddNewUser\");\n//       }\n//     )\n//     .catch(err =>\n//       dispatch({ type: FETCH_BUSINESS_FAILURE, payload: err.response })\n//     );\n// };\n// Used at Logout\n// export const logoutUser = () => ({\n//   type: 'LOGOUT_USER'\n// });\n\nexport const resetSearchResults = () => dispatch => {\n  dispatch({\n    type: FETCH_BUSINESS_SUCCESS,\n    payload: null\n  });\n}; //set user's store data\n\nexport const setUserInfo = userData => dispatch => {\n  // userInfo: {  \n  //   favorites\n  //   loggedInUser\n  //   businessInfo\n  //   activeWidgets\n  // }\n  dispatch({\n    type: GET_USER_DATA_SUCCESS,\n    payload: userData\n  });\n}; //get user data from the back end\n\nexport const getUserInfo = userID => dispatch => {\n  // userInfo: {  \n  //   favorites\n  //   loggedInUser\n  //   businessInfo\n  //   activeWidgets\n  // }\n  dispatch({\n    type: GET_USER_DATA_START\n  });\n  axiosWithAuth().get(\"users/\" + userID).then(res => {\n    //setUserInfo expects\n    // userInfo: {  \n    //   favorites\n    //   loggedInUser\n    //   businessInfo\n    //   activeWidgets\n    // }\n    //so map data from res.data into that format\n    let userInfo = {\n      competitors: res.data.favorites,\n      loggedInUser: {\n        firstName: res.data.first_name,\n        lastName: res.data.last_name\n      },\n      businesses: res.data.businesses,\n      activeWidgets: res.data.preferences && res.data.preferences.activeWidgets ? res.data.preferences.activeWidgets : [],\n      activeTabs: res.data.preferences && res.data.preferences.activeTabs ? res.data.preferences.activeTabs : []\n    };\n    console.log(\"Got user data, \", res); //{user_id: 13, first_name: \"Test\", last_name: \"Test\", businesses: Array(0), favorites: Array(0)}\n\n    dispatch({\n      type: GET_USER_DATA_SUCCESS,\n      payload: userInfo\n    });\n  }).catch(err => {\n    console.error(\"Error getting user data\", err);\n  });\n}; // Used at Login\n\nexport const shouldUpdateLoggedInUser = shouldUpdate => dispatch => {\n  dispatch({\n    type: UPDATE_LOGGED_IN_USER,\n    payload: shouldUpdate\n  });\n}; // Used at Edit Account\n\nexport const fetchEditAccount = (id, newInfo) => dispatch => {\n  //   newInfo: {\n  //     \"email\": string (optional),\n  //     \"password\": string (8 or more characters, optional),\n  //     \"first_name\": string (optional),\n  //     \"last_name\": string (optional),\n  //     \"preferences\": {\n  //         \"widgets\": array (optional)\n  //     }\n  // }\n  dispatch({\n    type: FETCH_EDITACCOUNT_START\n  });\n  axiosWithAuth().put(\"/users/\" + id, newInfo).then(res => dispatch({\n    type: FETCH_EDITACCOUNT_SUCCESS,\n    payload: res.data\n  }) & console.log(res.data, \"fetchEditAccount\")).catch(err => dispatch({\n    type: FETCH_EDITACCOUNT_FAILURE,\n    payload: err.response\n  }));\n}; // PhraseRank\n\nexport const fetchWordsOverTime = id => dispatch => {\n  dispatch({\n    type: FETCH_WORDS_OVER_TIME_START\n  });\n  console.log(\"\\nFetching words over time...\\n\");\n  const dsEndpoint = `https://cors-anywhere.herokuapp.com/http://django-tally.nv9fjcsgss.us-west-2.elasticbeanstalk.com/yelp/${id}?viztype=1`;\n  console.log(`Fetch Words Over Time endpoint:\\n${dsEndpoint}`);\n  axios.get(dsEndpoint).then(res => {\n    console.log(\"WORDS OVER TIME ACTION FETCH SUCCESS, PAYLOAD: \", res.data);\n    dispatch({\n      type: FETCH_WORDS_OVER_TIME_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: FETCH_WORDS_OVER_TIME_FAILURE,\n      payload: err\n    });\n  });\n}; // ReviewFrequency\n\nexport const fetchReviewsOverTime = id => dispatch => {\n  console.log(\"\\nFetching reviews over time...\\n\"); // axiosWithAuth()\n  // .get() // TODO: FIND OUT THE URL FROM DS\n  // .then(res => {\n  //   dispatch({ type:FETCH_REVIEWS_OVER_TIME_SUCCESS, payload: res.data });\n  // })\n  // .catch(err => {\n  //   dispatch({ type:FETCH_REVIEWS_OVER_TIME_FAILURE, payload: err });\n  // })\n}; // export const fetchAllWidgetData = id => {\n//   console.log(\"ID in fetchAllWidgetData:\\n\", id);\n//   fetchWordsOverTime(id);\n//   fetchTopAndBottom(id);\n// };\n\nexport const setFavorites = (favorites, userID) => dispatch => {\n  //TODO: Add eddpoint to set a user's favorites, have endpoint return the new list of favorites on success\n  console.log(\"ACTION SETTING FAVS\", favorites);\n  dispatch({\n    type: SET_FAVORITES_START\n  }); //hit endpoint POST userID and favorites\n  //then\n\n  dispatch({\n    type: SET_FAVORITES_SUCCESS,\n    payload: favorites\n  }); //payload: res.data\n  //catch\n  //dispatch({ type: SET_FAVORITES_FAILURE, payload: error });\n};\nexport const addFavorite = (favorite, userID) => dispatch => {//   {\n  //     \"email\": string (optional),\n  //     \"password\": string (8 or more characters, optional),\n  //     \"first_name\": string (optional),\n  //     \"last_name\": string (optional),\n  //     \"preferences\": {\n  //         \"widgets\": array (optional)\n  //     }\n  // }\n  // console.log(\"ACTION ADDING FAV\", favorite);\n  //   dispatch({ type: ADD_FAVORITE_START });\n  //   //hit endpoint POST userID and favorites\n  //   //then\n  //   axiosWithAuth()\n  //   .put(\"users/\" + userID, ) //endpoint goes here\n  //   .then(res => dispatch({ type: FETCH_EDITACCOUNT_SUCCESS, payload: newInfo }) & console.log(res.data, \"fetchEditAccount\"))\n  //   .catch(err => dispatch({ type: FETCH_EDITACCOUNT_FAILURE, payload: err.response }))\n  //   dispatch({ type: ADD_FAVORITE_SUCCESS, payload: res.favorites });//payload: res.data\n  //   //catch\n  //   //dispatch({ type: SET_FAVORITES_FAILURE, payload: error });\n};\nexport const removeFavorite = (favorite, userID) => dispatch => {// //TODO: Add eddpoint to set a user's favorites, have endpoint return the new list of favorites on success\n  // console.log(\"ACTION SETTING FAVS\", favorites);\n  //   dispatch({ type: SET_FAVORITES_START });\n  //   //hit endpoint POST userID and favorites\n  //   //then\n  //   dispatch({ type: SET_FAVORITES_SUCCESS, payload: favorites });//payload: res.data\n  //   //catch\n  //   //dispatch({ type: SET_FAVORITES_FAILURE, payload: error });\n};\nexport const fetchAllData = id => async dispatch => {\n  if (!id) {\n    console.error(\"WARNING: ID IS UNDEFINED\");\n  }\n\n  try {\n    dispatch({\n      type: FETCH_TOP_AND_BOTTOM_START\n    });\n    dispatch({\n      type: FETCH_RATING_OVER_TIME_START\n    });\n    console.log(\"Attempting to get data from \", `https://cors-anywhere.herokuapp.com/http://django-tally-dev.n9ntucwqks.us-west-2.elasticbeanstalk.com/yelp/${id}?viztype=0`);\n    const data = await axios.get(`https://cors-anywhere.herokuapp.com/http://django-tally-dev.n9ntucwqks.us-west-2.elasticbeanstalk.com/yelp/${id}?viztype=0`);\n    console.log(\"\\nData from viztype=0:\\n\", data);\n    const _data$data = data.data,\n          viztype0 = _data$data.viztype0,\n          viztype3 = _data$data.viztype3;\n    console.log(\"viztype0: \", viztype0);\n    console.log(\"viztype3: \", viztype3);\n    dispatch({\n      type: FETCH_TOP_AND_BOTTOM_SUCCESS,\n      payload: viztype0\n    });\n    dispatch({\n      type: FETCH_RATING_OVER_TIME_SUCCESS,\n      payload: viztype3\n    });\n  } catch (error) {\n    console.error(`\\nError getting data for topBottomWords and ratingOverTime\\n${error}\\n`);\n    dispatch({\n      type: FETCH_TOP_AND_BOTTOM_FAILURE,\n      payload: error\n    });\n    dispatch({\n      type: FETCH_RATING_OVER_TIME_FAILURE,\n      payload: error\n    });\n  }\n\n  try {\n    dispatch({\n      type: FETCH_WORDS_OVER_TIME_START\n    });\n    const phraseRank = await axios.get(`https://cors-anywhere.herokuapp.com/http://django-tally-dev.n9ntucwqks.us-west-2.elasticbeanstalk.com/yelp/${id}?viztype=1`);\n    dispatch({\n      type: FETCH_WORDS_OVER_TIME_SUCCESS,\n      payload: phraseRank\n    });\n  } catch (error) {\n    console.error(`\\nError getting data for phraseRank\\n${error}\\n`);\n    dispatch({\n      type: FETCH_WORDS_OVER_TIME_FAILURE,\n      payload: error\n    });\n  }\n\n  try {\n    dispatch({\n      type: FETCH_REVIEWS_OVER_TIME_START\n    });\n    const reviewsOverTime = await axios.get(`https://cors-anywhere.herokuapp.com/http://django-tally-dev.n9ntucwqks.us-west-2.elasticbeanstalk.com/yelp/${id}?viztype=2`);\n    console.log(\"Data in action for reviewsOverTime: \", reviewsOverTime);\n    dispatch({\n      type: FETCH_REVIEWS_OVER_TIME_SUCCESS,\n      payload: reviewsOverTime\n    });\n  } catch (error) {\n    console.error(`\\nError getting data for reviewsOverTime\\n${error}\\n`);\n    dispatch({\n      type: FETCH_REVIEWS_OVER_TIME_FAILURE,\n      payload: error\n    });\n  }\n\n  dispatch({\n    type: FETCH_RADAR_START\n  });\n  axiosWithAuth().get(`https://cors-anywhere.herokuapp.com/http://django-tally-dev.n9ntucwqks.us-west-2.elasticbeanstalk.com/yelp/${id}?viztype=4`).then(res => {\n    dispatch({\n      type: FETCH_RADAR_SUCCESS,\n      payload: res.data\n    });\n  }).catch(err => {\n    dispatch({\n      type: FETCH_RADAR_FAILURE,\n      payload: err\n    });\n  });\n};","map":{"version":3,"sources":["/Users/benkoehler/Desktop/Labs/tally-ai-fe/client/src/actions/index.js"],"names":["axiosWithYelpAuth","axiosWithAuth","axios","FETCH_BUSINESS_START","FETCH_BUSINESS_SUCCESS","FETCH_BUSINESS_FAILURE","SELECT_BUSINESS_START","SELECT_BUSINESS_SUCCESS","SELECT_BUSINESS_FAILURE","ADD_BUSINESS_START","ADD_BUSINESS_SUCCESS","ADD_BUSINESS_FAILURE","REMOVE_BUSINESS_START","REMOVE_BUSINESS_SUCCESS","REMOVE_BUSINESS_FAILURE","ADD_COMPETITOR_START","ADD_COMPETITOR_SUCCESS","ADD_COMPETITOR_FAILURE","REMOVE_COMPETITOR_START","REMOVE_COMPETITOR_SUCCESS","REMOVE_COMPETITOR_FAILURE","FETCH_TOP_AND_BOTTOM_START","FETCH_TOP_AND_BOTTOM_SUCCESS","FETCH_TOP_AND_BOTTOM_FAILURE","FETCH_RATING_OVER_TIME_START","FETCH_RATING_OVER_TIME_SUCCESS","FETCH_RATING_OVER_TIME_FAILURE","UPDATE_LOGGED_IN_USER","FETCH_EDITACCOUNT_START","FETCH_EDITACCOUNT_SUCCESS","FETCH_EDITACCOUNT_FAILURE","FETCH_WORDS_OVER_TIME_START","FETCH_WORDS_OVER_TIME_SUCCESS","FETCH_WORDS_OVER_TIME_FAILURE","FETCH_REVIEWS_OVER_TIME_START","FETCH_REVIEWS_OVER_TIME_SUCCESS","FETCH_REVIEWS_OVER_TIME_FAILURE","SET_ACTIVE_WIDGETS","SET_TABS_START","SET_TABS_FAILURE","SET_TABS_SUCCESS","SET_FAVORITES_START","SET_FAVORITES_FAILURE","SET_FAVORITES_SUCCESS","ADD_FAVORITE_START","ADD_FAVORITE_FAILURE","ADD_FAVORITE_SUCCESS","REMOVE_FAVORITE_START","REMOVE_FAVORITE_FAILURE","REMOVE_FAVORITE_SUCCESS","GET_USER_DATA_SUCCESS","GET_USER_DATA_START","UPDATE_YELP_DATA_START","UPDATE_YELP_DATA_SUCCESS","UPDATE_YELP_DATA_FAILURE","FETCH_RADAR_START","FETCH_RADAR_SUCCESS","FETCH_RADAR_FAILURE","fetchBusinesses","business","dispatch","console","log","name","location","latitude","longitude","type","payload","yelpSearchEndpoint","get","then","res","data","businesses","catch","err","setActiveWidgets","widgetArray","setActiveTabs","oldTabsArray","newTabsArray","userID","put","preferences","activeTabs","fetchTopAndBottom","id","dsEndpoint","selectBusiness","previousBusinessInfo","businessInfo","error","businessId","address","display_address","reviewCount","review_count","averageRating","rating","addBusiness","backendFormat","businessName","city","state","yelp","yelp_id","url","image_url","post","removeBusiness","businessID","delete","addCompetitor","removeCompetitor","searchResultsPlaceholder","results","resetSearchResults","setUserInfo","userData","getUserInfo","userInfo","competitors","favorites","loggedInUser","firstName","first_name","lastName","last_name","activeWidgets","shouldUpdateLoggedInUser","shouldUpdate","fetchEditAccount","newInfo","response","fetchWordsOverTime","fetchReviewsOverTime","setFavorites","addFavorite","favorite","removeFavorite","fetchAllData","viztype0","viztype3","phraseRank","reviewsOverTime"],"mappings":"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","sourcesContent":["import { axiosWithYelpAuth } from \"../auth/axiosWithYelpAuth\";\nimport { axiosWithAuth } from \"../auth/axiosWithAuth\";\nimport axios from \"axios\";\n\n/*\n  ------------ \n  ACTION TYPES \n  ------------\n*/\n\n// Yelp Business Search\nexport const FETCH_BUSINESS_START = \"FETCH_BUSINESS_START\";\nexport const FETCH_BUSINESS_SUCCESS = \"FETCH_BUSINESS_SUCCESS\";\nexport const FETCH_BUSINESS_FAILURE = \"FETCH_BUSINESS_FAILURE\";\n\n\n\n// Select business and add info to the store\nexport const SELECT_BUSINESS_START = \"SELECT_BUSINESS_START\";\nexport const SELECT_BUSINESS_SUCCESS = \"SELECT_BUSINESS_SUCCESS\";\nexport const SELECT_BUSINESS_FAILURE = \"SELECT_BUSINESS_FAILURE\";\n\n//adding businesses to user's owned businesses list\nexport const ADD_BUSINESS_START = \"ADD_BUSINESS_START\";\nexport const ADD_BUSINESS_SUCCESS = \"ADD_BUSINESS_SUCCESS\";\nexport const ADD_BUSINESS_FAILURE = \"ADD_BUSINESS_FAILURE\";\n\n//removing businesses from user's owned businesses list\nexport const REMOVE_BUSINESS_START = \"REMOVE_BUSINESS_START\";\nexport const REMOVE_BUSINESS_SUCCESS = \"REMOVE_BUSINESS_SUCCESS\";\nexport const REMOVE_BUSINESS_FAILURE = \"REMOVE_BUSINESS_FAILURE\";\n\n//adding competitors to user's competitor list\nexport const ADD_COMPETITOR_START = \"ADD_COMPETITOR_START\";\nexport const ADD_COMPETITOR_SUCCESS = \"ADD_COMPETITOR_SUCCESS\";\nexport const ADD_COMPETITOR_FAILURE = \"ADD_COMPETITOR_FAILURE\";\n\n//removing competitors from user's competitor list\nexport const REMOVE_COMPETITOR_START = \"REMOVE_COMPETITOR_START\";\nexport const REMOVE_COMPETITOR_SUCCESS = \"REMOVE_COMPETITOR_SUCCESS\";\nexport const REMOVE_COMPETITOR_FAILURE = \"REMOVE_COMPETITOR_FAILURE\";\n\n\n// TopBottomWords\nexport const FETCH_TOP_AND_BOTTOM_START = \"FETCH_TOP_AND_BOTTOM_START\";\nexport const FETCH_TOP_AND_BOTTOM_SUCCESS = \"FETCH_TOP_AND_BOTTOM_SUCCESS\";\nexport const FETCH_TOP_AND_BOTTOM_FAILURE = \"FETCH_TOP_AND_BOTTOM_FAILURE\";\n\n// ReviewFrequency\nexport const FETCH_RATING_OVER_TIME_START = \"FETCH_RATING_OVER_TIME_START\";\nexport const FETCH_RATING_OVER_TIME_SUCCESS = \"FETCH_RATING_OVER_TIME_SUCCESS\";\nexport const FETCH_RATING_OVER_TIME_FAILURE = \"FETCH_RATING_OVER_TIME_FAILURE\";\n\n// Registration\n// export const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\n// export const REGISTER_FAILURE = \"REGISTER_FAILURE\";\n// export const REGISTER_START = \"REGISTER_START\";\n\n// // Login\n// export const LOGIN_START = \"LOGIN_START\";\n// export const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\n// export const LOGIN_FAILURE = \"LOGIN_FAILURE\";\n\n// Logout\n// export const LOGOUT_USER = \"LOGOUT_USER\";\n\nexport const UPDATE_LOGGED_IN_USER = \"UPDATE_LOGGED_IN_USER\";\n\n// Edit Account\nexport const FETCH_EDITACCOUNT_START = \"FETCH_EDITACCOUNT_START\";\nexport const FETCH_EDITACCOUNT_SUCCESS = \"FETCH_EDITACCOUNT_SUCCESS\";\nexport const FETCH_EDITACCOUNT_FAILURE = \"FETCH_EDITACCOUNT_FAILURE\";\n\n// PhraseRank\nexport const FETCH_WORDS_OVER_TIME_START = \"FETCH_WORDS_OVER_TIME_START\";\nexport const FETCH_WORDS_OVER_TIME_SUCCESS = \"FETCH_WORDS_OVER_TIME_SUCCESS\";\nexport const FETCH_WORDS_OVER_TIME_FAILURE = \"FETCH_WORDS_OVER_TIME_FAILURE\";\n\n// ReviewFrequency\nexport const FETCH_REVIEWS_OVER_TIME_START = \"FETCH_REVIEWS_OVER_TIME_START\";\nexport const FETCH_REVIEWS_OVER_TIME_SUCCESS =\n  \"FETCH_REVIEWS_OVER_TIME_SUCCESS\";\nexport const FETCH_REVIEWS_OVER_TIME_FAILURE =\n  \"FETCH_REVIEWS_OVER_TIME_FAILURE\";\nexport const SET_ACTIVE_WIDGETS = \"SET_ACTIVE_WIDGETS\";\n\nexport const SET_TABS_START = \"SET_TABS_START\";\nexport const SET_TABS_FAILURE = \"SET_TABS_FAILURE\";\nexport const SET_TABS_SUCCESS = \"SET_TABS_SUCCESS\";\n\nexport const SET_FAVORITES_START = \"SET_FAVORITES_START\";\nexport const SET_FAVORITES_FAILURE = \"SET_FAVORITES_FAILURE\";\nexport const SET_FAVORITES_SUCCESS = \"SET_FAVORITES_SUCCESS\";\n\nexport const ADD_FAVORITE_START = \"ADD_FAVORITE_START\";\nexport const ADD_FAVORITE_FAILURE = \"ADD_FAVORITE_FAILURE\";\nexport const ADD_FAVORITE_SUCCESS = \"ADD_FAVORITE_SUCCESS\";\n\nexport const REMOVE_FAVORITE_START = \"REMOVE_FAVORITE_START\";\nexport const REMOVE_FAVORITE_FAILURE = \"REMOVE_FAVORITE_FAILURE\";\nexport const REMOVE_FAVORITE_SUCCESS = \"REMOVE_FAVORITE_SUCCESS\";\n\nexport const GET_USER_DATA_SUCCESS = \"GET_USER_DATA_SUCCESS\";\nexport const GET_USER_DATA_START = \"GET_USER_DATA_START\";\n\nexport const UPDATE_YELP_DATA_START = \"UPDATE_YELP_DATA_START\";\nexport const UPDATE_YELP_DATA_SUCCESS = \"UPDATE_YELP_DATA_SUCCESS\";\nexport const UPDATE_YELP_DATA_FAILURE = \"UPDATE_YELP_DATA_FAILURE\";\n\nexport const FETCH_RADAR_START = \"FETCH_RADAR_START\";\nexport const FETCH_RADAR_SUCCESS = \"FETCH_RADAR_SUCCESS\";\nexport const FETCH_RADAR_FAILURE = \"FETCH_RADAR_FAILURE\";\n\n/*\n  -------\n  ACTIONS\n  -------\n*/\n// Yelp Business Search\nexport const fetchBusinesses = business => dispatch => {\n  console.log(\"action business query\", business);\n\n  const name = business.name;\n  let location;\n\n  // Check for type of location provided - coords or phrase (ie city, state, etc)?\n  if (business.location.latitude && business.location.longitude) {\n    location = `latitude=${business.location.latitude}&longitude=${business.location.longitude}`;\n  } else if (business.location) {\n    location = `location=${business.location}`;\n  } else {\n    dispatch({\n      type: FETCH_BUSINESS_FAILURE,\n      payload: \"Business location required\"\n    });\n  }\n\n  // Dynamically generate endpoint using provided location and name\n  const yelpSearchEndpoint = `https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/search?term=${name}&${location}`;//I've tried like a million different solutions from Google to get this to work without a 403 and a CORS error, maybe someone else has ideas cause I give up\n\n  dispatch({ type: FETCH_BUSINESS_START });\n  console.log(\"Yelp API URL: \", yelpSearchEndpoint);\n  axiosWithYelpAuth()\n    .get(yelpSearchEndpoint)\n    .then(res => {\n      dispatch({\n        type: FETCH_BUSINESS_SUCCESS,\n        payload: res.data.businesses\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: FETCH_BUSINESS_FAILURE,\n        payload: err\n      });\n    });\n};\n\nexport const setActiveWidgets = (widgetArray) => dispatch => {\n  dispatch({ type: SET_ACTIVE_WIDGETS, payload: widgetArray });\n}\n\nexport const setActiveTabs = (oldTabsArray, newTabsArray, userID) => dispatch => {\n  console.log(\"Setting tabs on back end to \", newTabsArray);\n  dispatch({ type: SET_TABS_START, payload: newTabsArray});//predict that the request will be successful and update state immediatly so the user doesn't have to wait\n  axiosWithAuth()\n    .put(\"/users/\" + userID, { preferences: { activeTabs: newTabsArray } })\n    .then(res => console.log(\"TABS SET, RESULT: \", res) & dispatch({ type: SET_TABS_SUCCESS }))\n    .catch(err => dispatch({ type: SET_TABS_FAILURE, payload: oldTabsArray }))//revert to old array if an error occurs\n}\n\n// TopBottomWords\nexport const fetchTopAndBottom = id => dispatch => {\n  const dsEndpoint = `https://cors-anywhere.herokuapp.com/http://django-tally.nv9fjcsgss.us-west-2.elasticbeanstalk.com/yelp/${id}?viztype=0`;\n  console.log(\"Running fetchTopAndBottom.\");\n  dispatch({ type: FETCH_TOP_AND_BOTTOM_START });\n  axios\n    .get(dsEndpoint)\n    .then(res => {\n      dispatch({\n        type: FETCH_TOP_AND_BOTTOM_SUCCESS,\n        payload: res\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: FETCH_TOP_AND_BOTTOM_FAILURE,\n        payload: err\n      });\n    });\n};\n\n// Select business and add info to the store at state.businessInfo\nexport const selectBusiness = (previousBusinessInfo, businessInfo) => dispatch => {\n  if(businessInfo){//only request yelp data if both previous and new info are provided. This is useful while selecting new tabs\n    console.error(\"SECOND PARAMETER PROVIDED, not selecting new tab, params: \", previousBusinessInfo, businessInfo);\n  dispatch({ type: SELECT_BUSINESS_START, payload: businessInfo });//Predict that the selection will be successful by setting currentlySelectedBusiness immediatly, so that the user doesn't need to wait until address/rating info is gotten\n  axiosWithYelpAuth()\n  .get(\"https://cors-anywhere.herokuapp.com/https://api.yelp.com/v3/businesses/\" + businessInfo.businessId)\n  .then(res => {\n    dispatch({ type: SELECT_BUSINESS_SUCCESS, payload: {...businessInfo, address: res.data.location.display_address, reviewCount: res.data.review_count, averageRating: res.data.rating} });\n  })\n  .catch(err => {\n    dispatch({\n      type: SELECT_BUSINESS_FAILURE,\n      payload: previousBusinessInfo//revert back!\n    });\n  });\n}else{\n  dispatch({ type: SELECT_BUSINESS_SUCCESS, payload: previousBusinessInfo });\n}\n  console.log(\"\\nAdding business selection to the store...\\n\");\n};\n\n// export const fetchBusinessData = id => dispatch => {\n//   console.log(`\\nFetching business data for business ID ${id}\\n`);\n//   // dispatch \n// }\n\n\n// Select business and add info to the store at state.businessInfo\nexport const addBusiness = (businessInfo, userID) => dispatch => {\n  console.log(\"business in addBusiness: \", businessInfo);\n  // businessInfo must be in this format\n  //   {\n  //     \"name\": string,\n  //     \"city\": string,\n  //     \"state\": string,\n  //     \"yelp\": {\n  //         \"id\": string,\n  //         \"yelp_id\": string,\n  //         \"url\": string,\n  //         \"image_url\": string\n  //     }\n  // }\n\n  let backendFormat =\n  {\n    name: businessInfo.businessName,\n    city: businessInfo.city,\n    state: businessInfo.state,\n    yelp: {\n      yelp_id: businessInfo.businessId,\n      url: businessInfo.url,\n      image_url: businessInfo.image_url\n    }\n  }\n\n  console.log(\"\\nAdding business to the store...\\n\", backendFormat, businessInfo);\n//   businessId: \"aC1dn3qBFxgk-OYC3hFMgQ\"\n// businessName: \"In The Bowl\"\n// businessImg: \"https://s3-media1.fl.yelpcdn.com/bphoto/NpaN9bQ0YsJfI6fEVL5_Qg/o.jpg\"\n// reviewCount: 709\n// averageRating: 4\n// changeInRating: \"\"\n// url: \"https://www.yelp.com/biz/in-the-bowl-seattle-2?adjust_creative=qO78hV4p7yy-o3z8K5osow&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=qO78hV4p7yy-o3z8K5osow\"\n// image_url: \"https://s3-media1.fl.yelpcdn.com/bphoto/NpaN9bQ0YsJfI6fEVL5_Qg/o.jpg\"\n// city: \"Seattle\"\n// state: \"WA\"\n  dispatch({ type: ADD_BUSINESS_START });\n  //endpoint\n  axiosWithAuth()\n    .post(`/users/${userID}/business`, backendFormat)\n    .then(res => {\n      dispatch({\n        type: ADD_BUSINESS_SUCCESS,\n        payload: res.data//new array after modification\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: ADD_BUSINESS_FAILURE,\n        payload: err\n      });\n    });\n\n};\n\n\n// Select business and add info to the store at state.businessInfo\nexport const removeBusiness = (businessID, userID) => dispatch => {\n  console.log(\"\\removing business from the store...\\n\");\n  //dispatch({ type: REMOVE_BUSINESS_START, payload: businessInfo });\n  //DELETE /users/:id/business/:business_id\n  dispatch({ type: REMOVE_BUSINESS_START });\n  //endpoint\n  axiosWithAuth()\n    .delete(`/users/${userID}/business/${businessID}`)\n    .then(res => {\n      dispatch({\n        type: REMOVE_BUSINESS_SUCCESS,\n        payload: res.data//new array after modification\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: REMOVE_BUSINESS_FAILURE,\n        payload: err\n      });\n    });\n\n};\n\n\n// Select business and add info to the store at state.businessInfo\nexport const addCompetitor = (businessInfo, userID) => dispatch => {\n  console.log(\"\\nAdding competitor to the store...\\n\");\n  //dispatch({ type: ADD_BUSINESS, payload: businessInfo });\n  let backendFormat =\n  {\n    name: businessInfo.businessName,\n    city: businessInfo.city,\n    state: businessInfo.state,\n    yelp: {\n      yelp_id: businessInfo.businessId,\n      url: businessInfo.url,\n      image_url: businessInfo.image_url\n    }\n  }\n  console.log(\"Add competitor start, data:\", backendFormat);\n  dispatch({ type: ADD_COMPETITOR_START });\n  //endpoint\n  axiosWithAuth()\n    .post(`/users/${userID}/favorite`, backendFormat)\n    .then(res => {\n      console.log(\"Add competitor success, result:\", res);\n      dispatch({\n        type: ADD_COMPETITOR_SUCCESS,\n        payload: res.data//new array after modification\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: ADD_COMPETITOR_FAILURE,\n        payload: err\n      });\n    });\n  //POST /users/:id/favorite\n};\n\n\n// Select business and add info to the store at state.businessInfo\nexport const removeCompetitor = (businessID, userID) => dispatch => {\n\n  console.log(\"\\Removing competitor from the store...\\n\");\n\n  dispatch({ type: REMOVE_COMPETITOR_START });\n  //endpoint\n  axiosWithAuth()\n    .delete(`/users/${userID}/favorite/${businessID}`)\n    .then(res => {\n      dispatch({\n        type: REMOVE_COMPETITOR_SUCCESS,\n        payload: res.data//new array after modification\n      });\n    })\n    .catch(err => {\n      dispatch({\n        type: REMOVE_COMPETITOR_FAILURE,\n        payload: err\n      });\n    });\n\n  //dispatch({ type: ADD_BUSINESS, payload: businessInfo });\n  //DELETE /users/:id/favorite/:business_id\n};\n\nexport const searchResultsPlaceholder = results => dispatch => {\n  console.log(\"searchResultsPlaceholder action working\");\n\n  dispatch({\n    type: FETCH_BUSINESS_SUCCESS,\n    payload: results\n  });\n};\n\n// // Used at Registration\n// export const registerUser = newUser => dispatch => {\n//   console.log(\"User info: \", newUser);\n//   dispatch({ type: REGISTER_START })\n//   axios\n//     .post(`https://tally-ai.herokuapp.com/api/auth/register`, newUser) //swap local host with https://tally-ai.herokuapp.com/api/auth/register\n//     .then(\n//       res => {\n//         localStorage.setItem(\"token\", res.data.token);\n//         localStorage.setItem(\"userID\", res.data.userN.id);\n//         dispatch({ type: REGISTER_SUCCESS, payload: res.data.userN.id });\n//         console.log(res.data, \"fetchAddNewUser\");\n//       }\n//     )\n//     .catch(err =>\n//       dispatch({ type: FETCH_BUSINESS_FAILURE, payload: err.response })\n//     );\n// };\n\n// Used at Logout\n// export const logoutUser = () => ({\n//   type: 'LOGOUT_USER'\n// });\n\nexport const resetSearchResults = () => dispatch => {\n  dispatch({ type: FETCH_BUSINESS_SUCCESS, payload: null });\n}\n\n//set user's store data\nexport const setUserInfo = (userData) => dispatch => {\n  // userInfo: {  \n  //   favorites\n  //   loggedInUser\n  //   businessInfo\n  //   activeWidgets\n  // }\n  dispatch({ type: GET_USER_DATA_SUCCESS, payload: userData });\n\n}\n\n//get user data from the back end\nexport const getUserInfo = (userID) => dispatch => {\n  // userInfo: {  \n  //   favorites\n  //   loggedInUser\n  //   businessInfo\n  //   activeWidgets\n  // }\n  dispatch({ type: GET_USER_DATA_START })\n  axiosWithAuth()\n    .get(\"users/\" + userID)\n    .then(res => {\n      //setUserInfo expects\n      // userInfo: {  \n      //   favorites\n      //   loggedInUser\n      //   businessInfo\n      //   activeWidgets\n      // }\n      //so map data from res.data into that format\n\n      let userInfo = {\n        competitors: res.data.favorites,\n        loggedInUser: { firstName: res.data.first_name, lastName: res.data.last_name },\n        businesses: res.data.businesses,\n        activeWidgets: res.data.preferences && res.data.preferences.activeWidgets ? res.data.preferences.activeWidgets : [],\n        activeTabs: res.data.preferences && res.data.preferences.activeTabs ? res.data.preferences.activeTabs : []\n      }\n\n      console.log(\"Got user data, \", res);//{user_id: 13, first_name: \"Test\", last_name: \"Test\", businesses: Array(0), favorites: Array(0)}\n      dispatch({ type: GET_USER_DATA_SUCCESS, payload: userInfo })\n    })\n    .catch(err => {\n      console.error(\"Error getting user data\", err);\n    })\n\n}\n\n// Used at Login\nexport const shouldUpdateLoggedInUser = (shouldUpdate) => dispatch => {\n\n  dispatch({ type: UPDATE_LOGGED_IN_USER, payload: shouldUpdate });\n\n};\n\n// Used at Edit Account\nexport const fetchEditAccount = (id, newInfo) => dispatch => {\n  //   newInfo: {\n  //     \"email\": string (optional),\n  //     \"password\": string (8 or more characters, optional),\n  //     \"first_name\": string (optional),\n  //     \"last_name\": string (optional),\n  //     \"preferences\": {\n  //         \"widgets\": array (optional)\n  //     }\n  // }\n  dispatch({ type: FETCH_EDITACCOUNT_START });\n  axiosWithAuth()\n    .put(\"/users/\" + id, newInfo)\n    .then(res => dispatch({ type: FETCH_EDITACCOUNT_SUCCESS, payload: res.data }) & console.log(res.data, \"fetchEditAccount\"))\n    .catch(err => dispatch({ type: FETCH_EDITACCOUNT_FAILURE, payload: err.response }))\n};\n\n// PhraseRank\nexport const fetchWordsOverTime = id => dispatch => {\n  dispatch({ type: FETCH_WORDS_OVER_TIME_START });\n  console.log(\"\\nFetching words over time...\\n\");\n  const dsEndpoint = `https://cors-anywhere.herokuapp.com/http://django-tally.nv9fjcsgss.us-west-2.elasticbeanstalk.com/yelp/${id}?viztype=1`;\n  console.log(`Fetch Words Over Time endpoint:\\n${dsEndpoint}`);\n  axios\n    .get(dsEndpoint)\n    .then(res => {\n      console.log(\"WORDS OVER TIME ACTION FETCH SUCCESS, PAYLOAD: \", res.data);\n      dispatch({ type: FETCH_WORDS_OVER_TIME_SUCCESS, payload: res.data });\n    })\n    .catch(err => {\n      dispatch({ type: FETCH_WORDS_OVER_TIME_FAILURE, payload: err });\n    });\n};\n\n// ReviewFrequency\nexport const fetchReviewsOverTime = id => dispatch => {\n  console.log(\"\\nFetching reviews over time...\\n\");\n  // axiosWithAuth()\n  // .get() // TODO: FIND OUT THE URL FROM DS\n  // .then(res => {\n  //   dispatch({ type:FETCH_REVIEWS_OVER_TIME_SUCCESS, payload: res.data });\n  // })\n  // .catch(err => {\n  //   dispatch({ type:FETCH_REVIEWS_OVER_TIME_FAILURE, payload: err });\n  // })\n};\n\n// export const fetchAllWidgetData = id => {\n//   console.log(\"ID in fetchAllWidgetData:\\n\", id);\n//   fetchWordsOverTime(id);\n//   fetchTopAndBottom(id);\n// };\n\nexport const setFavorites = (favorites, userID) => dispatch => {\n\n  //TODO: Add eddpoint to set a user's favorites, have endpoint return the new list of favorites on success\n  console.log(\"ACTION SETTING FAVS\", favorites);\n  dispatch({ type: SET_FAVORITES_START });\n  //hit endpoint POST userID and favorites\n  //then\n  dispatch({ type: SET_FAVORITES_SUCCESS, payload: favorites });//payload: res.data\n  //catch\n  //dispatch({ type: SET_FAVORITES_FAILURE, payload: error });\n\n}\n\n\nexport const addFavorite = (favorite, userID) => dispatch => {\n\n  //   {\n  //     \"email\": string (optional),\n  //     \"password\": string (8 or more characters, optional),\n  //     \"first_name\": string (optional),\n  //     \"last_name\": string (optional),\n  //     \"preferences\": {\n  //         \"widgets\": array (optional)\n  //     }\n  // }\n  // console.log(\"ACTION ADDING FAV\", favorite);\n  //   dispatch({ type: ADD_FAVORITE_START });\n  //   //hit endpoint POST userID and favorites\n  //   //then\n  //   axiosWithAuth()\n  //   .put(\"users/\" + userID, ) //endpoint goes here\n  //   .then(res => dispatch({ type: FETCH_EDITACCOUNT_SUCCESS, payload: newInfo }) & console.log(res.data, \"fetchEditAccount\"))\n  //   .catch(err => dispatch({ type: FETCH_EDITACCOUNT_FAILURE, payload: err.response }))\n  //   dispatch({ type: ADD_FAVORITE_SUCCESS, payload: res.favorites });//payload: res.data\n  //   //catch\n  //   //dispatch({ type: SET_FAVORITES_FAILURE, payload: error });\n\n}\n\n\nexport const removeFavorite = (favorite, userID) => dispatch => {\n\n  // //TODO: Add eddpoint to set a user's favorites, have endpoint return the new list of favorites on success\n  // console.log(\"ACTION SETTING FAVS\", favorites);\n  //   dispatch({ type: SET_FAVORITES_START });\n  //   //hit endpoint POST userID and favorites\n  //   //then\n  //   dispatch({ type: SET_FAVORITES_SUCCESS, payload: favorites });//payload: res.data\n  //   //catch\n  //   //dispatch({ type: SET_FAVORITES_FAILURE, payload: error });\n\n}\n\nexport const fetchAllData = id => async dispatch => {\n\n  if (!id) {\n    console.error(\"WARNING: ID IS UNDEFINED\");\n  }\n\n  try {\n    dispatch({ type: FETCH_TOP_AND_BOTTOM_START });\n    dispatch({ type: FETCH_RATING_OVER_TIME_START });\n    console.log(\"Attempting to get data from \", `https://cors-anywhere.herokuapp.com/http://django-tally-dev.n9ntucwqks.us-west-2.elasticbeanstalk.com/yelp/${id}?viztype=0`);\n    const data = await axios.get(\n      `https://cors-anywhere.herokuapp.com/http://django-tally-dev.n9ntucwqks.us-west-2.elasticbeanstalk.com/yelp/${id}?viztype=0`\n    );\n    console.log(\"\\nData from viztype=0:\\n\", data);\n\n    const { viztype0, viztype3 } = data.data;\n    console.log(\"viztype0: \", viztype0);\n    console.log(\"viztype3: \", viztype3);\n\n    dispatch({ type: FETCH_TOP_AND_BOTTOM_SUCCESS, payload: viztype0 });\n    dispatch({ type: FETCH_RATING_OVER_TIME_SUCCESS, payload: viztype3 });\n  } catch (error) {\n    console.error(\n      `\\nError getting data for topBottomWords and ratingOverTime\\n${error}\\n`\n    );\n    dispatch({ type: FETCH_TOP_AND_BOTTOM_FAILURE, payload: error });\n    dispatch({ type: FETCH_RATING_OVER_TIME_FAILURE, payload: error });\n  }\n\n  try {\n    dispatch({ type: FETCH_WORDS_OVER_TIME_START });\n    const phraseRank = await axios.get(\n      `https://cors-anywhere.herokuapp.com/http://django-tally-dev.n9ntucwqks.us-west-2.elasticbeanstalk.com/yelp/${id}?viztype=1`\n    );\n    dispatch({ type: FETCH_WORDS_OVER_TIME_SUCCESS, payload: phraseRank });\n  } catch (error) {\n    console.error(`\\nError getting data for phraseRank\\n${error}\\n`);\n    dispatch({ type: FETCH_WORDS_OVER_TIME_FAILURE, payload: error });\n  }\n\n  try {\n    dispatch({ type: FETCH_REVIEWS_OVER_TIME_START });\n    const reviewsOverTime = await axios.get(\n      `https://cors-anywhere.herokuapp.com/http://django-tally-dev.n9ntucwqks.us-west-2.elasticbeanstalk.com/yelp/${id}?viztype=2`\n    );\n    console.log(\"Data in action for reviewsOverTime: \", reviewsOverTime);\n    dispatch({\n      type: FETCH_REVIEWS_OVER_TIME_SUCCESS,\n      payload: reviewsOverTime\n    });\n  } catch (error) {\n    console.error(`\\nError getting data for reviewsOverTime\\n${error}\\n`);\n    dispatch({ type: FETCH_REVIEWS_OVER_TIME_FAILURE, payload: error });\n  }\n\n  dispatch({ type: FETCH_RADAR_START });\n  axiosWithAuth()\n  .get(`https://cors-anywhere.herokuapp.com/http://django-tally-dev.n9ntucwqks.us-west-2.elasticbeanstalk.com/yelp/${id}?viztype=4`)\n  .then((res) => {\n    dispatch({ type: FETCH_RADAR_SUCCESS, payload: res.data});\n  })\n  .catch((err) => {\n    dispatch({ type: FETCH_RADAR_FAILURE, payload: err});\n  })\n\n};\n"]},"metadata":{},"sourceType":"module"}