{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Raudel Flores\\\\Documents\\\\Lambda-School\\\\LABS\\\\tally\\\\tally-ai-fe\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Raudel Flores\\\\Documents\\\\Lambda-School\\\\LABS\\\\tally\\\\tally-ai-fe\\\\client\\\\src\\\\components\\\\WidgetSystem\\\\Widgets\\\\PhraseRank.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { fetchWordsOverTime } from \"../../../actions/index\";\nimport { connect } from \"react-redux\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from \"recharts\";\nimport CircularProgress from '@material-ui/core/CircularProgress'; // const data = [\n//   {\n//     name: \"Date 1\",\n//     music: 2.1,\n//     food: 4,\n//     menu: 3,\n//     wait: 4,\n//     service: 5,\n//     coffee: 3,\n//     specials: 4\n//   },\n//   {\n//     name: \"Date 2\",\n//     music: 3,\n//     food: 4,\n//     menu: 2,\n//     wait: 3,\n//     service: 5,\n//     coffee: 3,\n//     specials: 4\n//   },\n//   {\n//     name: \"Date 3\",\n//     music: 3,\n//     food: 4,\n//     menu: 2,\n//     wait: 3,\n//     service: 4,\n//     coffee: 3,\n//     specials: 3\n//   },\n//   {\n//     name: \"Date 4\",\n//     music: 4,\n//     food: 5,\n//     menu: 2,\n//     wait: 3,\n//     service: 4,\n//     coffee: 2.5,\n//     specials: 4\n//   },\n//   {\n//     name: \"Date 5\",\n//     music: 2,\n//     food: 5,\n//     menu: 3,\n//     wait: 4,\n//     service: 5,\n//     coffee: 2.5,\n//     specials: 4\n//   },\n//   {\n//     name: \"Date 6\",\n//     music: 1,\n//     food: 5,\n//     menu: 3,\n//     wait: 5,\n//     service: 5,\n//     coffee: 3,\n//     specials: 5\n//   },\n//   {\n//     name: \"Date 7\",\n//     music: 1,\n//     food: 4,\n//     menu: 3,\n//     wait: 5,\n//     service: 4,\n//     coffee: 3,\n//     specials: 3\n//   }\n// ];\n// [\n//   {\n//       date: 'string with date',\n//       data: [ { phrase: \"phrase 1\", rank: 1}, { phrase: \"phrase 2\", rank: 1}, { phrase: \"phrase 3\", rank: 1} ]\n//   },\n//   {\n//       date: 'string with date',\n//       data: [ { phrase: \"phrase 1\", rank: 2}, { phrase: \"phrase 2\", rank: 2}, { phrase: \"phrase 3\", rank: 1.5} ]\n//   },\n//   {\n//       date: 'string with date',\n//       data: [ { phrase: \"phrase 1\", rank: 2}, { phrase: \"phrase 2\", rank: 4}, { phrase: \"phrase 3\", rank: 2} ]\n//   },\n// ]\n// ***** FORMAT OF DATA FROM API *****\n// const data = [\n//   {\n//     \"date\": \"2018-11-30\",\n//     \"data\": [\n//       {\n//         \"phrase\": \"room service\",\n//         \"rank\": 0.07187422941187253\n//       },\n//       {\n//         \"phrase\": \"room\",\n//         \"rank\": 0.06953759794899689\n//       }\n//     ]\n//   }\n// ]\n// let data = [\n//   {\n//     date: \"2018-10-31\",\n//     data: [\n//       { phrase: \"cats\", rank: 0.10585772170858118 },\n//       { phrase: \"cat trinkets\", rank: 0.10276609484544037 },\n//       { phrase: \"lagattara cat lounge\", rank: 0.057257664750850173 }\n//     ]\n//   },\n//   {\n//     date: \"2018-10-01\",\n//     data: [\n//       { phrase: \"cats\", rank: 0.11971089003312244 },\n//       { phrase: \"cat trinkets\", rank: 0.1168975660874371 },\n//       { phrase: \"lagattara cat lounge\", rank: 0.06877317438331688 }\n//     ]\n//   },\n//   {\n//     date: \"2018-09-01\",\n//     data: [\n//       { phrase: \"cats\", rank: 0.11971089003312244 },\n//       { phrase: \"cat trinkets\", rank: 0.1168975660874371 },\n//       { phrase: \"lagattara cat lounge\", rank: 0.06877317438331688 }\n//     ]\n//   },\n//   {\n//     date: \"2018-08-02\",\n//     data: [\n//       { phrase: \"cats\", rank: 0.07242538036797791 },\n//       { phrase: \"la gattara cat cafe\", rank: 0.07022155054771707 },\n//       { phrase: \"lagattara cat lounge\", rank: 0.060845456326491444 },\n//       { phrase: \"kitties\", rank: 0.06028849990521333 },\n//       { phrase: \"numerous kitties\", rank: 0.05952550442998647 }\n//     ]\n//   },\n//   {\n//     date: \"2018-07-03\",\n//     data: [\n//       { phrase: \"cats\", rank: 0.07086249241347795 },\n//       { phrase: \"la gattara cat cafe\", rank: 0.06897468881731089 },\n//       { phrase: \"lagattara cat lounge\", rank: 0.0597698146165342 },\n//       { phrase: \"kitties\", rank: 0.05904150930590128 },\n//       { phrase: \"numerous kitties\", rank: 0.05826887518919016 }\n//     ]\n//   },\n//   {\n//     date: \"2018-06-03\",\n//     data: [\n//       { phrase: \"cats\", rank: 0.06841957382380792 },\n//       { phrase: \"la gattara cat cafe\", rank: 0.06587261961869183 },\n//       { phrase: \"lagattara cat lounge\", rank: 0.05932166548658762 },\n//       { phrase: \"kitties\", rank: 0.059087829814863504 },\n//       { phrase: \"numerous kitties\", rank: 0.05785483210640082 }\n//     ]\n//   },\n//   {\n//     date: \"2018-05-04\",\n//     data: [\n//       { phrase: \"more cats\", rank: 0.09833681697376886 },\n//       { phrase: \"cats\", rank: 0.09678053448395155 },\n//       { phrase: \"place\", rank: 0.07263061257343 },\n//       { phrase: \"cat related games\", rank: 0.0639522676311155 },\n//       { phrase: \"a cat lounge\", rank: 0.05440661172891563 }\n//     ]\n//   },\n//   {\n//     date: \"2018-04-04\",\n//     data: [\n//       { phrase: \"cats\", rank: 0.09043479391028349 },\n//       { phrase: \"more cats\", rank: 0.08981891122211824 },\n//       { phrase: \"place\", rank: 0.06547762352874711 },\n//       { phrase: \"a cat lounge\", rank: 0.052332338424630094 },\n//       { phrase: \"cat related games\", rank: 0.04987447125305996 }\n//     ]\n//   },\n//   {\n//     date: \"2018-03-05\",\n//     data: [\n//       { phrase: \"cats\", rank: 0.09527793767077042 },\n//       { phrase: \"more cats\", rank: 0.09464921599958132 },\n//       { phrase: \"place\", rank: 0.06418727387229523 },\n//       { phrase: \"a cat lounge\", rank: 0.055159543183497056 },\n//       { phrase: \"cat related games\", rank: 0.052540543377104856 }\n//     ]\n//   }\n// ];\n//how phrases rank\n\nconst PhraseRank = props => {\n  const _useState = useState(),\n        _useState2 = _slicedToArray(_useState, 2),\n        formattedData = _useState2[0],\n        setFormattedData = _useState2[1]; // useEffect(() => {\n  //   props.fetchWordsOverTime();\n  // }, []);\n\n\n  useEffect(() => {\n    console.log(\"useEfffect working\");\n\n    if (props.data != null) {\n      console.log(\"Data? \", props.data); //format data\n\n      let tempFormattedData = [];\n      props.data.forEach(date => {\n        let tempObject = {};\n        tempObject.name = date.date;\n        date.data.forEach(item => {\n          //scale the rank from 1-5 stars (it's normally 0-1) and round decimals\n          tempObject[item.phrase] = scaleFloat(item.rank, 1, 5, 0, 1).toFixed(2); //dynamically add a variable to tempObject with the name of data.phrase, and set its value as that phrase's rank\n        });\n        tempFormattedData.push(tempObject);\n      });\n      console.log(\"Result\", tempFormattedData);\n      setFormattedData(tempFormattedData);\n    }\n  }, [props.data]);\n\n  function scaleFloat(num, min, max, inputMin, inputMax) {\n    let scaled = (num - inputMin) / (inputMax - inputMin) * (max - min) + min;\n    return scaled;\n  }\n\n  function getLineNames() {\n    let allPhrases = [];\n    formattedData.forEach(date => {\n      Object.keys(date).forEach(phrase => {\n        if (!allPhrases.includes(phrase)) {\n          //this includes is always false, must be something to do with object comparisons instead of string comparisons\n          allPhrases.push(phrase);\n        }\n      });\n    }); //we should have a comprehensive list of all line names now\n\n    return allPhrases.filter(name => name !== \"name\"); //exlude the \"name\" variable cause it's the date, not the data\n  }\n\n  if (props.isFetching) {\n    return React.createElement(\"div\", {\n      className: \"phraseRank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, React.createElement(CircularProgress, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257\n      },\n      __self: this\n    }, \"Loading...\"));\n  }\n\n  if (props.error) {\n    return React.createElement(\"div\", {\n      className: \"phraseRank\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260\n      },\n      __self: this\n    }, \"Error!\");\n  }\n\n  if (!formattedData) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }, \"formatting data\");\n  } //a widget that maps the rank of a phrase over time\n\n\n  return React.createElement(\"div\", {\n    className: \"widget\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    className: \"widgetTitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, \"Trends\"), React.createElement(\"p\", {\n    className: \"widgetSubtitle\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, \"See what word phrases are said more or less in your reviews over time.\"), React.createElement(\"div\", {\n    className: \"graphContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, React.createElement(ResponsiveContainer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, React.createElement(LineChart, {\n    data: formattedData,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }, React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }), React.createElement(XAxis, {\n    dataKey: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }), React.createElement(YAxis, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }), React.createElement(Tooltip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }), React.createElement(Legend, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287\n    },\n    __self: this\n  }), getLineNames().map(lineName => {\n    console.log(\"Adding line with name\", lineName);\n    return React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: lineName,\n      stroke: \"#B287A3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    });\n  })))));\n}; // wordsOverTime: {\n//     isFetching: false,\n//     error: null,\n//     data: { words: dummyWordsOverTime }\n\n\nconst mapStateToProps = state => ({\n  data: state.widgetData.wordsOverTime.data,\n  error: state.widgetData.wordsOverTime.error,\n  isFetching: state.widgetData.wordsOverTime.isFetching\n});\n\nexport default connect(mapStateToProps, {\n  fetchWordsOverTime\n})(PhraseRank);","map":{"version":3,"sources":["C:/Users/Raudel Flores/Documents/Lambda-School/LABS/tally/tally-ai-fe/client/src/components/WidgetSystem/Widgets/PhraseRank.js"],"names":["React","useState","useEffect","fetchWordsOverTime","connect","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","CircularProgress","PhraseRank","props","formattedData","setFormattedData","console","log","data","tempFormattedData","forEach","date","tempObject","name","item","phrase","scaleFloat","rank","toFixed","push","num","min","max","inputMin","inputMax","scaled","getLineNames","allPhrases","Object","keys","includes","filter","isFetching","error","top","right","left","bottom","map","lineName","mapStateToProps","state","widgetData","wordsOverTime"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { fetchWordsOverTime } from \"../../../actions/index\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from \"recharts\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n// const data = [\r\n//   {\r\n//     name: \"Date 1\",\r\n//     music: 2.1,\r\n//     food: 4,\r\n//     menu: 3,\r\n//     wait: 4,\r\n//     service: 5,\r\n//     coffee: 3,\r\n//     specials: 4\r\n//   },\r\n//   {\r\n//     name: \"Date 2\",\r\n//     music: 3,\r\n//     food: 4,\r\n//     menu: 2,\r\n//     wait: 3,\r\n//     service: 5,\r\n//     coffee: 3,\r\n//     specials: 4\r\n//   },\r\n//   {\r\n//     name: \"Date 3\",\r\n//     music: 3,\r\n//     food: 4,\r\n//     menu: 2,\r\n//     wait: 3,\r\n//     service: 4,\r\n//     coffee: 3,\r\n//     specials: 3\r\n//   },\r\n//   {\r\n//     name: \"Date 4\",\r\n//     music: 4,\r\n//     food: 5,\r\n//     menu: 2,\r\n//     wait: 3,\r\n//     service: 4,\r\n//     coffee: 2.5,\r\n//     specials: 4\r\n//   },\r\n//   {\r\n//     name: \"Date 5\",\r\n//     music: 2,\r\n//     food: 5,\r\n//     menu: 3,\r\n//     wait: 4,\r\n//     service: 5,\r\n//     coffee: 2.5,\r\n//     specials: 4\r\n//   },\r\n//   {\r\n//     name: \"Date 6\",\r\n//     music: 1,\r\n//     food: 5,\r\n//     menu: 3,\r\n//     wait: 5,\r\n//     service: 5,\r\n//     coffee: 3,\r\n//     specials: 5\r\n//   },\r\n//   {\r\n//     name: \"Date 7\",\r\n//     music: 1,\r\n//     food: 4,\r\n//     menu: 3,\r\n//     wait: 5,\r\n//     service: 4,\r\n//     coffee: 3,\r\n//     specials: 3\r\n//   }\r\n// ];\r\n\r\n// [\r\n//   {\r\n//       date: 'string with date',\r\n//       data: [ { phrase: \"phrase 1\", rank: 1}, { phrase: \"phrase 2\", rank: 1}, { phrase: \"phrase 3\", rank: 1} ]\r\n//   },\r\n//   {\r\n//       date: 'string with date',\r\n//       data: [ { phrase: \"phrase 1\", rank: 2}, { phrase: \"phrase 2\", rank: 2}, { phrase: \"phrase 3\", rank: 1.5} ]\r\n//   },\r\n//   {\r\n//       date: 'string with date',\r\n//       data: [ { phrase: \"phrase 1\", rank: 2}, { phrase: \"phrase 2\", rank: 4}, { phrase: \"phrase 3\", rank: 2} ]\r\n//   },\r\n// ]\r\n\r\n// ***** FORMAT OF DATA FROM API *****\r\n// const data = [\r\n//   {\r\n//     \"date\": \"2018-11-30\",\r\n//     \"data\": [\r\n//       {\r\n//         \"phrase\": \"room service\",\r\n//         \"rank\": 0.07187422941187253\r\n//       },\r\n//       {\r\n//         \"phrase\": \"room\",\r\n//         \"rank\": 0.06953759794899689\r\n//       }\r\n//     ]\r\n//   }\r\n// ]\r\n\r\n// let data = [\r\n//   {\r\n//     date: \"2018-10-31\",\r\n//     data: [\r\n//       { phrase: \"cats\", rank: 0.10585772170858118 },\r\n//       { phrase: \"cat trinkets\", rank: 0.10276609484544037 },\r\n//       { phrase: \"lagattara cat lounge\", rank: 0.057257664750850173 }\r\n//     ]\r\n//   },\r\n//   {\r\n//     date: \"2018-10-01\",\r\n//     data: [\r\n//       { phrase: \"cats\", rank: 0.11971089003312244 },\r\n//       { phrase: \"cat trinkets\", rank: 0.1168975660874371 },\r\n//       { phrase: \"lagattara cat lounge\", rank: 0.06877317438331688 }\r\n//     ]\r\n//   },\r\n//   {\r\n//     date: \"2018-09-01\",\r\n//     data: [\r\n//       { phrase: \"cats\", rank: 0.11971089003312244 },\r\n//       { phrase: \"cat trinkets\", rank: 0.1168975660874371 },\r\n//       { phrase: \"lagattara cat lounge\", rank: 0.06877317438331688 }\r\n//     ]\r\n//   },\r\n//   {\r\n//     date: \"2018-08-02\",\r\n//     data: [\r\n//       { phrase: \"cats\", rank: 0.07242538036797791 },\r\n//       { phrase: \"la gattara cat cafe\", rank: 0.07022155054771707 },\r\n//       { phrase: \"lagattara cat lounge\", rank: 0.060845456326491444 },\r\n//       { phrase: \"kitties\", rank: 0.06028849990521333 },\r\n//       { phrase: \"numerous kitties\", rank: 0.05952550442998647 }\r\n//     ]\r\n//   },\r\n//   {\r\n//     date: \"2018-07-03\",\r\n//     data: [\r\n//       { phrase: \"cats\", rank: 0.07086249241347795 },\r\n//       { phrase: \"la gattara cat cafe\", rank: 0.06897468881731089 },\r\n//       { phrase: \"lagattara cat lounge\", rank: 0.0597698146165342 },\r\n//       { phrase: \"kitties\", rank: 0.05904150930590128 },\r\n//       { phrase: \"numerous kitties\", rank: 0.05826887518919016 }\r\n//     ]\r\n//   },\r\n//   {\r\n//     date: \"2018-06-03\",\r\n//     data: [\r\n//       { phrase: \"cats\", rank: 0.06841957382380792 },\r\n//       { phrase: \"la gattara cat cafe\", rank: 0.06587261961869183 },\r\n//       { phrase: \"lagattara cat lounge\", rank: 0.05932166548658762 },\r\n//       { phrase: \"kitties\", rank: 0.059087829814863504 },\r\n//       { phrase: \"numerous kitties\", rank: 0.05785483210640082 }\r\n//     ]\r\n//   },\r\n//   {\r\n//     date: \"2018-05-04\",\r\n//     data: [\r\n//       { phrase: \"more cats\", rank: 0.09833681697376886 },\r\n//       { phrase: \"cats\", rank: 0.09678053448395155 },\r\n//       { phrase: \"place\", rank: 0.07263061257343 },\r\n//       { phrase: \"cat related games\", rank: 0.0639522676311155 },\r\n//       { phrase: \"a cat lounge\", rank: 0.05440661172891563 }\r\n//     ]\r\n//   },\r\n//   {\r\n//     date: \"2018-04-04\",\r\n//     data: [\r\n//       { phrase: \"cats\", rank: 0.09043479391028349 },\r\n//       { phrase: \"more cats\", rank: 0.08981891122211824 },\r\n//       { phrase: \"place\", rank: 0.06547762352874711 },\r\n//       { phrase: \"a cat lounge\", rank: 0.052332338424630094 },\r\n//       { phrase: \"cat related games\", rank: 0.04987447125305996 }\r\n//     ]\r\n//   },\r\n//   {\r\n//     date: \"2018-03-05\",\r\n//     data: [\r\n//       { phrase: \"cats\", rank: 0.09527793767077042 },\r\n//       { phrase: \"more cats\", rank: 0.09464921599958132 },\r\n//       { phrase: \"place\", rank: 0.06418727387229523 },\r\n//       { phrase: \"a cat lounge\", rank: 0.055159543183497056 },\r\n//       { phrase: \"cat related games\", rank: 0.052540543377104856 }\r\n//     ]\r\n//   }\r\n// ];\r\n\r\n//how phrases rank\r\nconst PhraseRank = props => {\r\n  const [formattedData, setFormattedData] = useState();\r\n\r\n  // useEffect(() => {\r\n  //   props.fetchWordsOverTime();\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(\"useEfffect working\");\r\n    if (props.data != null) {\r\n      console.log(\"Data? \", props.data);\r\n      //format data\r\n      let tempFormattedData = [];\r\n      props.data.forEach(date => {\r\n        let tempObject = {};\r\n        tempObject.name = date.date;\r\n        date.data.forEach(item => {\r\n          //scale the rank from 1-5 stars (it's normally 0-1) and round decimals\r\n          tempObject[item.phrase] = scaleFloat(item.rank, 1, 5, 0, 1).toFixed(2); //dynamically add a variable to tempObject with the name of data.phrase, and set its value as that phrase's rank\r\n        });\r\n        tempFormattedData.push(tempObject);\r\n      });\r\n      console.log(\"Result\", tempFormattedData);\r\n      setFormattedData(tempFormattedData);\r\n    }\r\n  }, [props.data]);\r\n\r\n  function scaleFloat(num, min, max, inputMin, inputMax) {\r\n    let scaled = ((num - inputMin) / (inputMax - inputMin)) * (max - min) + min;\r\n\r\n    return scaled;\r\n  }\r\n\r\n  function getLineNames() {\r\n    let allPhrases = [];\r\n    formattedData.forEach(date => {\r\n      Object.keys(date).forEach(phrase => {\r\n        if (!allPhrases.includes(phrase)) {\r\n          //this includes is always false, must be something to do with object comparisons instead of string comparisons\r\n          allPhrases.push(phrase);\r\n        }\r\n      });\r\n    });\r\n    //we should have a comprehensive list of all line names now\r\n    return allPhrases.filter(name => name !== \"name\"); //exlude the \"name\" variable cause it's the date, not the data\r\n  }\r\n\r\n  if (props.isFetching) {\r\n    return <div className=\"phraseRank\"><CircularProgress>Loading...</CircularProgress></div>;\r\n  }\r\n  if (props.error) {\r\n    return <div className=\"phraseRank\">Error!</div>;\r\n  }\r\n\r\n  if (!formattedData) {\r\n    return <div>formatting data</div>;\r\n  }\r\n\r\n  //a widget that maps the rank of a phrase over time\r\n  return (\r\n    <div className=\"widget\">\r\n    <h3 className=\"widgetTitle\">Trends</h3>\r\n    <p className=\"widgetSubtitle\">See what word phrases are said more or less in your reviews over time.</p>\r\n    <div className=\"graphContainer\">\r\n    <ResponsiveContainer>\r\n    <LineChart\r\n      data={formattedData}\r\n      margin={{\r\n        top: 5,\r\n        right: 30,\r\n        left: 20,\r\n        bottom: 5\r\n      }}\r\n    >\r\n      <CartesianGrid strokeDasharray=\"3 3\" />\r\n      <XAxis dataKey=\"name\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend />\r\n\r\n      {getLineNames().map(lineName => {\r\n        console.log(\"Adding line with name\", lineName);\r\n        return <Line type=\"monotone\" dataKey={lineName} stroke=\"#B287A3\" />;\r\n      })}\r\n\r\n      {/* <Line type=\"monotone\" dataKey=\"food\" stroke=\"#7E4E60\" />\r\n      <Line type=\"monotone\" dataKey=\"menu\" stroke=\"#B287A3\" />\r\n      <Line type=\"monotone\" dataKey=\"wait\" stroke=\"#82ca9d\" />\r\n      <Line type=\"monotone\" dataKey=\"service\" stroke=\"#C0F8D1\" />\r\n      <Line type=\"monotone\" dataKey=\"coffee\" stroke=\"#BDCFB5\" />\r\n      <Line type=\"monotone\" dataKey=\"specials\" stroke=\"#482728\" /> */}\r\n    </LineChart>\r\n    </ResponsiveContainer>\r\n    </div>\r\n    </div>\r\n  );\r\n};\r\n// wordsOverTime: {\r\n//     isFetching: false,\r\n//     error: null,\r\n//     data: { words: dummyWordsOverTime }\r\nconst mapStateToProps = state => ({\r\n  data: state.widgetData.wordsOverTime.data,\r\n  error: state.widgetData.wordsOverTime.error,\r\n  isFetching: state.widgetData.wordsOverTime.isFetching\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchWordsOverTime })(PhraseRank);\r\n"]},"metadata":{},"sourceType":"module"}