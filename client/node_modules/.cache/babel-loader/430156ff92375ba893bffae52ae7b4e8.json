{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Raudel Flores\\\\Documents\\\\Lambda-School\\\\LABS\\\\tally\\\\tally-ai-fe\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"C:\\\\Users\\\\Raudel Flores\\\\Documents\\\\Lambda-School\\\\LABS\\\\tally\\\\tally-ai-fe\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Raudel Flores\\\\Documents\\\\Lambda-School\\\\LABS\\\\tally\\\\tally-ai-fe\\\\client\\\\src\\\\components\\\\settings\\\\editaccount.js\";\nimport React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { connect } from \"react-redux\";\nimport { fetchEditAccount } from \"../../actions/index\";\nconst useStyles = makeStyles(theme => ({\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexDirection: 'column',\n    alignItems: 'center',\n    backgroundColor: 'white'\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: '80%'\n  },\n  dense: {\n    marginTop: theme.spacing(2)\n  },\n  button: {\n    margin: theme.spacing(1),\n    marginTop: '2%',\n    marginBottom: '6%',\n    width: '15%'\n  },\n  input: {\n    display: 'none'\n  }\n}));\n\nfunction EditAccount(props) {\n  /*\r\n      User can enter updates to first name, last name, email, or password.\r\n      If password is updated, they must confirm the password.\r\n  */\n  const classes = useStyles();\n\n  const _useState = useState({\n    first_name: \"\",\n    last_name: \"\",\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        userCredentials = _useState2[0],\n        setCredentials = _useState2[1];\n\n  console.log(props);\n\n  const changeHandler = e => {}; // Submit updated account info to back end\n\n\n  const submitHandler = event => {\n    event.preventDefault();\n    console.log(userCredentials); // Check that confirmPassword matches password.\n    // This should handle catching changes to password without\n    // the confirmation of those changes.\n\n    if (userCredentials.password !== userCredentials.confirmPassword) {\n      alert(\"Your confirmed password does not match.\");\n      return;\n    } // Package the updated info to send to the back end.\n    // Notice we're only sending the data entered by the user - \n    // ie, the data that's been changed from \"\" to something else\n    // - and not including the confirmPassword.\n\n\n    const updatedCredentials = Object.keys(userCredentials).reduce((acc, key) => userCredentials[key] !== \"\" && key !== \"confirmPassword\" ? _objectSpread({}, acc, {\n      [key]: userCredentials[key]\n    }) : acc, {});\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\",\n      height: \"100vh\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {\n      paddingTop: \"175px\",\n      color: \"linear-gradient(341.24deg, #E3F2FD 11.16%, #BBDEFB 82.03%)\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    className: classes.container,\n    onSubmit: submitHandler,\n    style: {\n      boxShadow: \"0px 4px 20px rgba(0, 0, 0, 0.2)\",\n      width: \"50%\",\n      marginLeft: \"25%\",\n      marginRight: \"25%\",\n      marginBottom: \"5%\",\n      borderRadius: \"5%\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    style: {},\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Account\"), React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Change your basic account settings\")), React.createElement(TextField, {\n    label: \"First Name\",\n    variant: \"outlined\",\n    margin: \"normal\",\n    type: \"text\",\n    name: \"first_name\",\n    className: classes.textField,\n    value: userCredentials.first_name,\n    onChange: changeHandler,\n    placeholder: \"First Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    label: \"Last Name\",\n    variant: \"outlined\",\n    margin: \"normal\",\n    type: \"text\",\n    name: \"last_name\",\n    className: classes.textField,\n    value: userCredentials.last_name,\n    onChange: changeHandler,\n    placeholder: \"Last Name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    label: \"Email\",\n    variant: \"outlined\",\n    margin: \"normal\",\n    type: \"email\",\n    name: \"email\",\n    className: classes.textField,\n    value: userCredentials.email,\n    onChange: changeHandler,\n    placeholder: \"Email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    label: \"Password\",\n    variant: \"outlined\",\n    margin: \"normal\",\n    type: \"password\",\n    name: \"password\",\n    className: classes.textField,\n    value: userCredentials.password,\n    onChange: changeHandler,\n    placeholder: \"Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    label: \"Confirm Password\",\n    variant: \"outlined\",\n    margin: \"normal\",\n    type: \"password\",\n    name: \"confirmPassword\",\n    className: classes.textField,\n    value: userCredentials.confirmPassword,\n    onChange: changeHandler,\n    placeholder: \"Confirm Password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }), React.createElement(Button, {\n    className: classes.button,\n    variant: \"outlined\",\n    color: \"black\",\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"Edit\")))));\n}\n\nconst mapStateToProps = state => {\n  return {\n    test: state\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchEditAccount\n})(EditAccount);","map":{"version":3,"sources":["C:/Users/Raudel Flores/Documents/Lambda-School/LABS/tally/tally-ai-fe/client/src/components/settings/editaccount.js"],"names":["React","useState","useEffect","makeStyles","TextField","Button","connect","fetchEditAccount","useStyles","theme","container","display","flexWrap","flexDirection","alignItems","backgroundColor","textField","marginLeft","spacing","marginRight","width","dense","marginTop","button","margin","marginBottom","input","EditAccount","props","classes","first_name","last_name","email","password","confirmPassword","userCredentials","setCredentials","console","log","changeHandler","e","submitHandler","event","preventDefault","alert","updatedCredentials","Object","keys","reduce","acc","key","textAlign","height","paddingTop","color","boxShadow","borderRadius","mapStateToProps","state","test"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport {connect } from \"react-redux\"\r\n\r\nimport { fetchEditAccount } from \"../../actions/index\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        backgroundColor: 'white',\r\n       \r\n    },\r\n    textField: {\r\n      marginLeft: theme.spacing(1),\r\n      marginRight: theme.spacing(1),\r\n      width: '80%'\r\n    },\r\n    dense: {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n   \r\n    button: {\r\n    margin: theme.spacing(1),\r\n    marginTop: '2%',\r\n    marginBottom: '6%',\r\n    width: '15%'\r\n    },\r\n    input: {\r\n    display: 'none',\r\n    },\r\n    \r\n  }));\r\n\r\n\r\nfunction EditAccount(props){\r\n    /*\r\n        User can enter updates to first name, last name, email, or password.\r\n        If password is updated, they must confirm the password.\r\n    */\r\n\r\n    const classes = useStyles();\r\n\r\n    const [userCredentials, setCredentials] = useState({\r\n        first_name: \"\",\r\n        last_name: \"\",\r\n        email: \"\",\r\n        password: \"\",\r\n        confirmPassword: \"\"\r\n    });\r\n\r\n    console.log(props);\r\n\r\n    const changeHandler = e => {\r\n\r\n    }\r\n\r\n\r\n    // Submit updated account info to back end\r\n    const submitHandler = event => {\r\n        event.preventDefault();\r\n        console.log(userCredentials);\r\n        \r\n        // Check that confirmPassword matches password.\r\n        // This should handle catching changes to password without\r\n        // the confirmation of those changes.\r\n        if(userCredentials.password !== userCredentials.confirmPassword){\r\n            alert(\"Your confirmed password does not match.\");\r\n            return;\r\n        }\r\n\r\n        // Package the updated info to send to the back end.\r\n        // Notice we're only sending the data entered by the user - \r\n        // ie, the data that's been changed from \"\" to something else\r\n        // - and not including the confirmPassword.\r\n        const updatedCredentials = Object.keys(userCredentials).reduce((acc, key) => \r\n            userCredentials[key] !== \"\" && key !== \"confirmPassword\"\r\n            ? {...acc, [key]: userCredentials[key]}\r\n            : acc\r\n            , {});\r\n\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <div style={{textAlign:\"center\", height: \"100vh\"}}>\r\n            <div style={{paddingTop:\"175px\", color: \"linear-gradient(341.24deg, #E3F2FD 11.16%, #BBDEFB 82.03%)\"}}>\r\n            <form className ={classes.container} onSubmit= {submitHandler} style={{ boxShadow: \"0px 4px 20px rgba(0, 0, 0, 0.2)\", width: \"50%\", marginLeft: \"25%\", marginRight: \"25%\", marginBottom: \"5%\", borderRadius: \"5%\"}}>\r\n                <div style={{}}>\r\n                    <h1>Account</h1>\r\n                    <h3>Change your basic account settings</h3>\r\n                </div>\r\n            <TextField \r\n                label =\"First Name\"\r\n                variant =\"outlined\"\r\n                margin=\"normal\"\r\n                type=\"text\"\r\n                name=\"first_name\"\r\n                className={classes.textField}\r\n                value={userCredentials.first_name}\r\n                onChange={changeHandler}\r\n                placeholder=\"First Name\"\r\n                />\r\n            <TextField \r\n                label =\"Last Name\"\r\n                variant =\"outlined\"\r\n                margin=\"normal\"\r\n                type=\"text\"\r\n                name=\"last_name\"\r\n                className={classes.textField}\r\n                value={userCredentials.last_name}\r\n                onChange={changeHandler}\r\n                placeholder=\"Last Name\"\r\n                />\r\n            <TextField \r\n                label =\"Email\"\r\n                variant =\"outlined\"\r\n                margin=\"normal\"\r\n                type=\"email\"\r\n                name=\"email\"\r\n                className={classes.textField}\r\n                value={userCredentials.email}\r\n                onChange={changeHandler}\r\n                placeholder=\"Email\"\r\n                />\r\n            <TextField \r\n                label =\"Password\"\r\n                variant =\"outlined\"\r\n                margin=\"normal\"\r\n                type=\"password\"\r\n                name=\"password\"\r\n                 \r\n                className={classes.textField}\r\n                value={userCredentials.password}\r\n                onChange={changeHandler}\r\n                placeholder=\"Password\"\r\n                />\r\n            <TextField \r\n                label =\"Confirm Password\"\r\n                variant =\"outlined\"\r\n                margin=\"normal\"\r\n                type=\"password\"\r\n                name=\"confirmPassword\"\r\n                className={classes.textField}\r\n                value={userCredentials.confirmPassword}\r\n                onChange={changeHandler}\r\n                placeholder=\"Confirm Password\"\r\n                /> \r\n                <Button className ={classes.button} variant=\"outlined\" color=\"black\" type =\"submit\">Edit</Button>\r\n                </form>  \r\n            </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        test: state\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, {fetchEditAccount})(EditAccount)\r\n"]},"metadata":{},"sourceType":"module"}