{"ast":null,"code":"import _slicedToArray from \"/Users/benkoehler/Desktop/Labs/tally-ai-fe/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/benkoehler/Desktop/Labs/tally-ai-fe/client/src/components/search/results.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport Result from \"./result\";\nimport { selectBusiness, resetSearchResults } from \"../../actions/index\";\nimport dbContains from \"../../dbIds\";\n/*Required business data for Result\ndata {\n  image_url\n  name\n  rating (1-5)\n  phone\n    location {\n      address1\n      state\n      zip_code\n    }\n}\n*/\n\nconst Results = props => {\n  /* \n    tentativeSelection is made by clicking on the result component.\n    Once tentativeSelection is made, the select button appears.\n    The tentativeSelection contains business information from Yelp,\n    including the businessId used for requests to DS API.\n  */\n\n  /*  \n      ten·ta·tive\n      /ˈten(t)ədiv/\n  \n      adjective\n  \n      not certain or fixed; provisional.\n      \"a tentative conclusion\"\n  \n      done without confidence; hesitant.\n      \"he eventually tried a few tentative steps round his hospital room\" \n  */\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        tentativeSelection = _useState2[0],\n        setTentativeSelection = _useState2[1];\n\n  useEffect(() => {\n    if (tentativeSelection != \"\") {\n      select();\n    }\n  }, [tentativeSelection]);\n  let history = useHistory();\n  /*\n    select is used as the onClick for the select button.\n    Calling the select function does the following:\n    - adds the business information from tentativeSelection \n      to the store under state.businessInfo\n    - routes the user to the dashboard\n  */\n\n  const select = () => {\n    props.resetSearchResults();\n    props.select(tentativeSelection);\n    console.log(\"Select working, tentative\", tentativeSelection);\n  };\n\n  console.log(\"props\", props);\n  /*\n    active, props.businesses.error, and props.businesses.isFetching\n    are used to conditionally render the results section.\n    \n    active is true if the request to Yelp was successful and the\n    search results are in\n  */\n\n  const _useState3 = useState(),\n        _useState4 = _slicedToArray(_useState3, 2),\n        active = _useState4[0],\n        setActive = _useState4[1];\n\n  useEffect(() => {\n    if (props.businesses.data) {\n      //There are now search results to display from state, lets do our CSS animation and render results\n      setActive(true);\n    }\n  }, [props.businesses.data]); //TODO: style loading and error messages\n\n  if (props.businesses.error) {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Error loading search results...\");\n  }\n\n  if (props.businesses.isFetching) {\n    return React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Loading search results...\");\n  }\n\n  if (!active) {\n    //we don't want to try to render until state has been touched\n    return React.createElement(React.Fragment, null);\n  }\n\n  if (!props.businesses.data) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    });\n  } // if (props.businesses.data.length === 0) {\n  //   return <h2>No results found</h2>;\n  // } else {\n\n\n  let animationClass = \"\";\n  let fadeForm = document.querySelector(\".search-form\");\n\n  if (active) {\n    animationClass = \" expand-search-results\";\n    fadeForm.classList.add(\"formFaded\");\n  }\n\n  console.log(\"Animation class\", animationClass);\n  const results = props.businesses.data.reduce((acc, result) => //acc?\n  // For now, only render results that already exist in the database\n  dbContains(result.id) ? [...acc, React.createElement(Result, {\n    data: result,\n    select: select,\n    key: result.id,\n    setTentativeSelection: setTentativeSelection,\n    className: `result ${result.id === tentativeSelection.businessId ? \"selected\" : \"not-selected\"}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  })] : acc, []);\n\n  const Sorry = () => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Sorry, your business is not currently supported, please try a cafe in Phoenix, AZ!\"));\n\n  const NoResults = () => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Sorry, no results for this business.\"));\n\n  return React.createElement(\"div\", {\n    className: \"search-results\" + animationClass,\n    style: {\n      overflowY: \"scroll\",\n      marginTop: \"8vh\",\n      height: \"102vh\"\n    } // change margin top to 20vh if you want it to be even with the left div\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, props.businesses.data.length ? results.length ? results : React.createElement(Sorry, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }) : React.createElement(NoResults, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  })); // }\n};\n\nconst mapStateToProps = state => ({\n  businesses: state.searchResults,\n  selectedBusiness: state.currentlySelectedBusiness\n});\n\nexport default connect(mapStateToProps, {\n  selectBusiness,\n  resetSearchResults\n})(Results);","map":{"version":3,"sources":["/Users/benkoehler/Desktop/Labs/tally-ai-fe/client/src/components/search/results.js"],"names":["React","useEffect","useState","connect","useHistory","Result","selectBusiness","resetSearchResults","dbContains","Results","props","tentativeSelection","setTentativeSelection","select","history","console","log","active","setActive","businesses","data","error","isFetching","animationClass","fadeForm","document","querySelector","classList","add","results","reduce","acc","result","id","businessId","Sorry","NoResults","overflowY","marginTop","height","length","mapStateToProps","state","searchResults","selectedBusiness","currentlySelectedBusiness"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\n\nimport Result from \"./result\";\nimport { selectBusiness, resetSearchResults } from \"../../actions/index\";\n\nimport dbContains from \"../../dbIds\";\n\n/*Required business data for Result\ndata {\n  image_url\n  name\n  rating (1-5)\n  phone\n    location {\n      address1\n      state\n      zip_code\n    }\n}\n*/\n\nconst Results = props => {\n  /* \n    tentativeSelection is made by clicking on the result component.\n    Once tentativeSelection is made, the select button appears.\n    The tentativeSelection contains business information from Yelp,\n    including the businessId used for requests to DS API.\n  */\n \n/*  \n    ten·ta·tive\n    /ˈten(t)ədiv/\n\n    adjective\n\n    not certain or fixed; provisional.\n    \"a tentative conclusion\"\n\n    done without confidence; hesitant.\n    \"he eventually tried a few tentative steps round his hospital room\" \n*/\n  const [tentativeSelection, setTentativeSelection] = useState(\"\");\n\n  useEffect(() => {\n    if(tentativeSelection != \"\"){\n      select();\n    }\n  }, [tentativeSelection])\n\n  let history = useHistory();\n\n  /*\n    select is used as the onClick for the select button.\n    Calling the select function does the following:\n    - adds the business information from tentativeSelection \n      to the store under state.businessInfo\n    - routes the user to the dashboard\n  */\n  const select = () => {\n    props.resetSearchResults();\n    props.select(tentativeSelection);\n    console.log(\"Select working, tentative\", tentativeSelection);\n  };\n\n  console.log(\"props\", props);\n\n  /*\n    active, props.businesses.error, and props.businesses.isFetching\n    are used to conditionally render the results section.\n    \n    active is true if the request to Yelp was successful and the\n    search results are in\n  */\n  const [active, setActive] = useState();\n\n  useEffect(() => {\n    if (props.businesses.data) {\n      //There are now search results to display from state, lets do our CSS animation and render results\n      setActive(true);\n    }\n  }, [props.businesses.data]);\n\n  //TODO: style loading and error messages\n  if (props.businesses.error) {\n    return <p>Error loading search results...</p>;\n  }\n\n  if (props.businesses.isFetching) {\n    return <p>Loading search results...</p>;\n  }\n\n  if (!active) {\n    //we don't want to try to render until state has been touched\n    return <></>;\n  }\n\n  if(!props.businesses.data){\n    return <div></div>\n  }\n\n  // if (props.businesses.data.length === 0) {\n  //   return <h2>No results found</h2>;\n  // } else {\n    let animationClass = \"\";\n    let fadeForm = document.querySelector(\".search-form\");\n\n    if (active) {\n      animationClass = \" expand-search-results\";\n      fadeForm.classList.add(\"formFaded\");\n    }\n    console.log(\"Animation class\", animationClass);\n\n    const results = props.businesses.data.reduce((acc, result) => //acc?\n        // For now, only render results that already exist in the database\n        dbContains(result.id)\n          ? [...acc, ( \n            <Result\n              data={result}\n              select={select}\n              key={result.id}\n              setTentativeSelection={setTentativeSelection}\n              className={`result ${\n                result.id === tentativeSelection.businessId\n                  ? \"selected\"\n                  : \"not-selected\"\n              }`}\n            />\n          )]\n          : acc\n          , []\n    );\n\n    const Sorry = () => (\n      <div>\n        <h2>Sorry, your business is not currently supported, please try a cafe in Phoenix, AZ!</h2>\n      </div>\n    );\n\n    const NoResults = () => (\n      <div>\n        <h2>Sorry, no results for this business.</h2>\n      </div>\n    );\n    \n\n    return (\n      <div\n        className={\"search-results\" + animationClass}\n        style={{ overflowY: \"scroll\", marginTop: \"8vh\", height: \"102vh\" }} // change margin top to 20vh if you want it to be even with the left div\n      >\n        {\n          props.businesses.data.length \n            ? results.length \n              ? results \n              : <Sorry/>\n            : <NoResults />\n        }\n      </div>\n    );\n  // }\n};\n\nconst mapStateToProps = state => ({\n  businesses: state.searchResults,\n  selectedBusiness: state.currentlySelectedBusiness\n});\n\nexport default connect(mapStateToProps, { selectBusiness, resetSearchResults })(Results);\n"]},"metadata":{},"sourceType":"module"}