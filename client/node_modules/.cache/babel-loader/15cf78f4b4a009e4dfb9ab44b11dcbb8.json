{"ast":null,"code":"var _jsxFileName = \"/Users/benkoehler/Desktop/Labs/tally-ai-fe/client/src/App.js\";\nimport React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport { Route } from \"react-router-dom\";\nimport { withRouter } from 'react-router-dom';\nimport { connect } from \"react-redux\";\nimport { axiosWithAuth } from \"./auth/axiosWithAuth\";\nimport { setUserInfo, getUserInfo, shouldUpdateLoggedInUser } from \"./actions/index\";\nimport PrivateRoute from \"./auth/PrivateRoute\";\nimport PublicRoute from \"./auth/PublicRoute\";\nimport SearchPage from \"./components/SearchPage\"; // Components\n\nimport RestrictMobile from \"./components/RestrictMobile\";\nimport NavBar from \"./components/navbar\";\nimport Footer from \"./components/footer\";\nimport Search from \"./components/search.js\";\nimport DashboardGrid from \"./components/dashboard/dashboard\";\nimport registration from \"./components/registration\";\nimport Login from \"./components/login\";\nimport EditAccount from \"./components/settings/editaccount\";\nimport CompSet from \"./components/compSet\";\nimport AboutUs from \"./components/aboutus\";\nimport DashboardPlus from \"./components/dashboard/dashboardPlus\";\nimport Policy from \"./components/TOS/legal\";\nimport { widgets } from \"./components/WidgetSystem/WidgetRegistry\";\n\nfunction App(props) {\n  useEffect(() => {\n    console.log(\"getting user data\");\n\n    if (localStorage.getItem(\"token\") && localStorage.getItem(\"userID\")) {\n      //we're logged in but there's no user info in the store, lets fix that\n      props.getUserInfo(localStorage.getItem(\"userID\"));\n    } else {\n      //do we need to delete anything from state when they log out?\n      let userInfo = {\n        competitors: [],\n        loggedInUser: {\n          firstName: null,\n          lastName: null\n        },\n        businesses: [],\n        activeWidgets: [widgets[0].name, widgets[1].name],\n        activeTabs: [\"defaultTab\"],\n        currentlySelectedBusiness: {\n          businessId: null,\n          businessName: null,\n          businessImg: null,\n          reviewCount: 0,\n          averageRating: 0,\n          changeInRating: \"\"\n        }\n      };\n      props.setUserInfo(userInfo);\n    }\n\n    props.shouldUpdateLoggedInUser(false);\n  }, [props.loggedInUser.shouldUpdate]);\n  return React.createElement(\"div\", {\n    className: \"App\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(RestrictMobile, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }), React.createElement(NavBar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }), React.createElement(PublicRoute, {\n    exact: true,\n    path: \"/\",\n    component: Search,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/Dashboard/\",\n    component: DashboardGrid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/Register/\",\n    component: registration,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/Login/\",\n    component: Login,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/Compset\",\n    component: CompSet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/About\",\n    component: AboutUs,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/Legal/:doc\",\n    component: Policy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }), React.createElement(Route, {\n    path: \"/DashboardPlus/\",\n    component: DashboardPlus,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(PrivateRoute, {\n    path: \"/Settings/\",\n    component: EditAccount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }), React.createElement(PrivateRoute, {\n    path: \"/Search/:searchMode\",\n    exact: true,\n    component: SearchPage,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(Footer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => ({\n  loggedInUser: state.loggedInUser,\n  activeTabs: state.activeTabs\n});\n\nexport default withRouter(connect(mapStateToProps, {\n  setUserInfo,\n  getUserInfo,\n  shouldUpdateLoggedInUser\n})(App)); // {\n//   \"first_name\": string,\n//   \"last_name\": string,\n//   \"businesses\": [\n//       {\n//           \"id\": integer,\n//           \"name\": string,\n//           \"location\": {\n//               \"city\": string,\n//               \"state\": string\n//           }\n//           \"yelp\": {\n//               \"id\": string,\n//               \"yelp_id\": string,\n//               \"url\": string,\n//               \"image_url\": string\n//           }\n//       },\n//   ],\n//   \"favorites\": [\n//     {\n//         \"id\": integer,\n//         \"name\": string,\n//         \"location\": {\n//             \"city\": string,\n//             \"state\": string\n//         }\n//         \"yelp\": {\n//             \"id\": string,\n//             \"yelp_id\": string,\n//             \"url\": string,\n//             \"image_url\": string\n//         }\n//     },\n// ]\n// }","map":{"version":3,"sources":["/Users/benkoehler/Desktop/Labs/tally-ai-fe/client/src/App.js"],"names":["React","useEffect","Route","withRouter","connect","axiosWithAuth","setUserInfo","getUserInfo","shouldUpdateLoggedInUser","PrivateRoute","PublicRoute","SearchPage","RestrictMobile","NavBar","Footer","Search","DashboardGrid","registration","Login","EditAccount","CompSet","AboutUs","DashboardPlus","Policy","widgets","App","props","console","log","localStorage","getItem","userInfo","competitors","loggedInUser","firstName","lastName","businesses","activeWidgets","name","activeTabs","currentlySelectedBusiness","businessId","businessName","businessImg","reviewCount","averageRating","changeInRating","shouldUpdate","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,WAAT,EAAsBC,WAAtB,EAAmCC,wBAAnC,QAAmE,iBAAnE;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,UAAP,MAAuB,yBAAvB,C,CACA;;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,aAAP,MAA0B,sCAA1B;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AAEA,SAASC,OAAT,QAAwB,0CAAxB;;AAGA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAElBzB,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;;AACA,QAAIC,YAAY,CAACC,OAAb,CAAqB,OAArB,KAAiCD,YAAY,CAACC,OAAb,CAAqB,QAArB,CAArC,EAAqE;AAAC;AAEpEJ,MAAAA,KAAK,CAACnB,WAAN,CAAkBsB,YAAY,CAACC,OAAb,CAAqB,QAArB,CAAlB;AAED,KAJD,MAIO;AACL;AACA,UAAIC,QAAQ,GAAG;AACbC,QAAAA,WAAW,EAAE,EADA;AAEbC,QAAAA,YAAY,EAAE;AAAEC,UAAAA,SAAS,EAAE,IAAb;AAAmBC,UAAAA,QAAQ,EAAE;AAA7B,SAFD;AAGbC,QAAAA,UAAU,EAAE,EAHC;AAIbC,QAAAA,aAAa,EAAE,CAACb,OAAO,CAAC,CAAD,CAAP,CAAWc,IAAZ,EAAkBd,OAAO,CAAC,CAAD,CAAP,CAAWc,IAA7B,CAJF;AAKbC,QAAAA,UAAU,EAAE,CAAC,YAAD,CALC;AAMbC,QAAAA,yBAAyB,EAAE;AACzBC,UAAAA,UAAU,EAAE,IADa;AAEzBC,UAAAA,YAAY,EAAE,IAFW;AAGzBC,UAAAA,WAAW,EAAE,IAHY;AAIzBC,UAAAA,WAAW,EAAE,CAJY;AAKzBC,UAAAA,aAAa,EAAE,CALU;AAMzBC,UAAAA,cAAc,EAAE;AANS;AANd,OAAf;AAgBApB,MAAAA,KAAK,CAACpB,WAAN,CAAkByB,QAAlB;AACD;;AACDL,IAAAA,KAAK,CAAClB,wBAAN,CAA+B,KAA/B;AACD,GA3BQ,EA2BN,CAACkB,KAAK,CAACO,YAAN,CAAmBc,YAApB,CA3BM,CAAT;AA6BA,SACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,oBAAC,WAAD;AAAa,IAAA,KAAK,MAAlB;AAAmB,IAAA,IAAI,EAAC,GAAxB;AAA4B,IAAA,SAAS,EAAEhC,MAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,aAAZ;AAA0B,IAAA,SAAS,EAAEC,aAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,EAKE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,YAAZ;AAAyB,IAAA,SAAS,EAAEC,YAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAME,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,SAAZ;AAAsB,IAAA,SAAS,EAAEC,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,SAAS,EAAEE,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAQE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,SAAS,EAAEC,OAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,aAAZ;AAA0B,IAAA,SAAS,EAAEE,MAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EAUE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,iBAAZ;AAA8B,IAAA,SAAS,EAAED,aAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,EAWE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,YAAnB;AAAgC,IAAA,SAAS,EAAEH,WAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,EAYE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,qBAAnB;AAAyC,IAAA,KAAK,MAA9C;AAA+C,IAAA,SAAS,EAAER,UAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,EAaE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CADF;AAiBD;;AAED,MAAMqC,eAAe,GAAGC,KAAK,KAAK;AAChChB,EAAAA,YAAY,EAAEgB,KAAK,CAAChB,YADY;AAEhCM,EAAAA,UAAU,EAAEU,KAAK,CAACV;AAFc,CAAL,CAA7B;;AAKA,eAAepC,UAAU,CAACC,OAAO,CAAC4C,eAAD,EAAkB;AAAE1C,EAAAA,WAAF;AAAeC,EAAAA,WAAf;AAA4BC,EAAAA;AAA5B,CAAlB,CAAP,CAAiFiB,GAAjF,CAAD,CAAzB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport { Route } from \"react-router-dom\";\nimport { withRouter } from 'react-router-dom'\nimport { connect } from \"react-redux\";\nimport { axiosWithAuth } from \"./auth/axiosWithAuth\"\nimport { setUserInfo, getUserInfo, shouldUpdateLoggedInUser } from \"./actions/index\";\nimport PrivateRoute from \"./auth/PrivateRoute\";\nimport PublicRoute from \"./auth/PublicRoute\";\nimport SearchPage from \"./components/SearchPage\"\n// Components\nimport RestrictMobile from \"./components/RestrictMobile\"\nimport NavBar from \"./components/navbar\";\nimport Footer from \"./components/footer\";\nimport Search from \"./components/search.js\";\nimport DashboardGrid from \"./components/dashboard/dashboard\";\nimport registration from \"./components/registration\";\nimport Login from \"./components/login\";\nimport EditAccount from \"./components/settings/editaccount\";\nimport CompSet from \"./components/compSet\";\nimport AboutUs from \"./components/aboutus\";\nimport DashboardPlus from \"./components/dashboard/dashboardPlus\";\nimport Policy from \"./components/TOS/legal\";\n\nimport { widgets } from \"./components/WidgetSystem/WidgetRegistry\"\n\n\nfunction App(props) {\n\n  useEffect(() => {\n    console.log(\"getting user data\");\n    if (localStorage.getItem(\"token\") && localStorage.getItem(\"userID\")) {//we're logged in but there's no user info in the store, lets fix that\n\n      props.getUserInfo(localStorage.getItem(\"userID\"));\n\n    } else {\n      //do we need to delete anything from state when they log out?\n      let userInfo = {\n        competitors: [],\n        loggedInUser: { firstName: null, lastName: null },\n        businesses: [],\n        activeWidgets: [widgets[0].name, widgets[1].name],\n        activeTabs: [\"defaultTab\"],\n        currentlySelectedBusiness: {\n          businessId: null,\n          businessName: null,\n          businessImg: null,\n          reviewCount: 0,\n          averageRating: 0,\n          changeInRating: \"\"\n        }\n      }\n\n      props.setUserInfo(userInfo);\n    }\n    props.shouldUpdateLoggedInUser(false);\n  }, [props.loggedInUser.shouldUpdate])\n\n  return (\n    <div className=\"App\">\n      <RestrictMobile />\n      <NavBar />\n      <PublicRoute exact path=\"/\" component={Search} />\n      <Route path=\"/Dashboard/\" component={DashboardGrid} />\n      <Route path=\"/Register/\" component={registration} />\n      <Route path=\"/Login/\" component={Login} />\n      <Route path=\"/Compset\" component={CompSet} />\n      <Route path=\"/About\" component={AboutUs} />\n      <Route path=\"/Legal/:doc\" component={Policy} />\n      <Route path=\"/DashboardPlus/\" component={DashboardPlus} />\n      <PrivateRoute path=\"/Settings/\" component={EditAccount} />\n      <PrivateRoute path=\"/Search/:searchMode\" exact component={SearchPage} />\n      <Footer />\n    </div>\n  );\n}\n\nconst mapStateToProps = state => ({\n  loggedInUser: state.loggedInUser,\n  activeTabs: state.activeTabs\n});\n\nexport default withRouter(connect(mapStateToProps, { setUserInfo, getUserInfo, shouldUpdateLoggedInUser })(App));\n\n// {\n//   \"first_name\": string,\n//   \"last_name\": string,\n//   \"businesses\": [\n//       {\n//           \"id\": integer,\n//           \"name\": string,\n//           \"location\": {\n//               \"city\": string,\n//               \"state\": string\n//           }\n//           \"yelp\": {\n//               \"id\": string,\n//               \"yelp_id\": string,\n//               \"url\": string,\n//               \"image_url\": string\n//           }\n//       },\n//   ],\n//   \"favorites\": [\n//     {\n//         \"id\": integer,\n//         \"name\": string,\n//         \"location\": {\n//             \"city\": string,\n//             \"state\": string\n//         }\n//         \"yelp\": {\n//             \"id\": string,\n//             \"yelp_id\": string,\n//             \"url\": string,\n//             \"image_url\": string\n//         }\n//     },\n// ]\n// }"]},"metadata":{},"sourceType":"module"}