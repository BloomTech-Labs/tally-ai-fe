{"ast":null,"code":"import _objectSpread from \"/Users/benkoehler/Desktop/Labs/tally-ai-fe/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { // Data for TopBottomWords\nFETCH_TOP_AND_BOTTOM_START, FETCH_TOP_AND_BOTTOM_SUCCESS, FETCH_TOP_AND_BOTTOM_FAILURE //flag user data to be updated, this will GET_USER_DATA if it needs to\n, UPDATE_LOGGED_IN_USER //get all the user's data from backend\n, GET_USER_DATA_SUCCESS, GET_USER_DATA_START // Edit Account\n, FETCH_EDITACCOUNT_START, FETCH_EDITACCOUNT_SUCCESS, FETCH_EDITACCOUNT_FAILURE // Data for PhraseRank\n, FETCH_WORDS_OVER_TIME_START, FETCH_WORDS_OVER_TIME_SUCCESS, FETCH_WORDS_OVER_TIME_FAILURE // Data for ReviewFrequency\n, FETCH_REVIEWS_OVER_TIME_START, FETCH_REVIEWS_OVER_TIME_SUCCESS, FETCH_REVIEWS_OVER_TIME_FAILURE // Data for RatingOverTime\n, FETCH_RATING_OVER_TIME_START, FETCH_RATING_OVER_TIME_SUCCESS, FETCH_RATING_OVER_TIME_FAILURE, SET_ACTIVE_WIDGETS, SET_TABS_START, SET_TABS_SUCCESS, SET_TABS_FAILURE // SET_FAVORITES_START,\n// SET_FAVORITES_SUCCESS,\n// SET_FAVORITES_FAILURE,\n// ADD_FAVORITE_START,\n// ADD_FAVORITE_SUCCESS,\n// ADD_FAVORITE_FAILURE,\n// REMOVE_FAVORITE_START,\n// REMOVE_FAVORITE_SUCCESS,\n// REMOVE_FAVORITE_FAILURE\n, FETCH_RADAR_START, FETCH_RADAR_SUCCESS, FETCH_RADAR_FAILURE } from \"../actions/index.js\";\nimport dummyWordsOverTime from \"../dummyData/dummyWordsOverTime\";\nimport dummyReviewsOverTime from \"../dummyData/dummyReviewsOverTime\";\nimport { widgets } from \"../components/WidgetSystem/WidgetRegistry\";\nconst initialState = {\n  loggedInUser: {\n    data: {\n      firstName: null,\n      lastName: null\n    },\n    shouldUpdate: true,\n    isFetching: false,\n    error: null\n  },\n  searchResults: {\n    isFetching: false,\n    error: null,\n    data: null\n  },\n  //currently selected business, this is what the dashboard will always display\n  currentlySelectedBusiness: {\n    businessId: null,\n    //default tab selected by default\n    // for side bar\n    businessName: null,\n    businessImg: null,\n    // for top-of-page info cards\n    reviewCount: 0,\n    averageRating: 0,\n    changeInRating: \"\",\n    address: \"\"\n  },\n  // the user's businesses that they own\n  userBusinesses: {\n    isSetting: false,\n    error: null,\n    businesses: [// [{\n      //   businessId: \"jndajnsdj0202020\",\n      //   // for side bar\n      //   businessName: \"IOwnThisBusiness\",\n      //   businessImg: null,\n      //   // for top-of-page info cards\n      //   reviewCount: 0,\n      //   averageRating: 0,\n      //   changeInRating: \"\"\n      // }]\n    ]\n  },\n  //Defaults to [widgets[0].name, widgets[1].name]. Later we can load some saved dashboard widgets from the db (should still have a default value here so they don't start out with an empty dashboard)\n  //Array order really matters with activeWidgets, since it determines in which order they'll render. When the user drags an element to a new position on the screen, we need to translate that position to array position\n  activeWidgets: [widgets[0].name, widgets[1].name],\n  //array of open tabs and the IDs of the businesses they display, anything that's not an actual business ID, like \"defaultTab\", will just be New Tabs.\n  //In this case we default to 1 open New Tab, this will be replaced if the user has any previously open tabs in their preferences from the database.\n  tabs: {\n    activeTabs: [{\n      businessId: \"defaultTab\"\n    }],\n    //isCompetitor used to color tab depending on if you own the business or if its a competitor\n    isFetching: false,\n    error: null\n  },\n  // Data for populating the visuals\n  widgetData: {\n    // TopBottomWords\n    keyWords: {\n      isFetching: false,\n      error: null,\n      data: {\n        positive: [],\n        negative: []\n      }\n    },\n    // PhraseRank\n    wordsOverTime: {\n      isFetching: false,\n      error: null,\n      data: null\n    },\n    // ReviewFrequency\n    reviewsOverTime: {\n      isFetching: false,\n      error: null,\n      data: null\n    },\n    // RatingOverTime\n    ratingOverTime: {\n      isFetching: false,\n      error: null,\n      data: null\n    },\n    radarWidget: {\n      isFetching: false,\n      error: null,\n      data: null\n    }\n  }\n};\n\nfunction reducer(state = initialState, action) {\n  console.log(\"Reducer working, current action: \", action.type, \" Payload: \", action.payload); //TODO: seperate this switch into multiple files, it's way too long\n\n  switch (action.type) {\n    case FETCH_RADAR_START:\n      return _objectSpread({}, state, {\n        widgetData: _objectSpread({}, state.widgetData, {\n          radarWidget: _objectSpread({}, state.radarWidget, {\n            isFetching: true,\n            error: null\n          })\n        })\n      });\n\n    case FETCH_RADAR_SUCCESS:\n      return _objectSpread({}, state, {\n        widgetData: _objectSpread({}, state.widgetData, {\n          radarWidget: {\n            isFetching: false,\n            error: null,\n            data: action.payload\n          }\n        })\n      });\n\n    case FETCH_RADAR_FAILURE:\n      return _objectSpread({}, state, {\n        widgetData: _objectSpread({}, state.widgetData, {\n          radarWidget: _objectSpread({}, state.radarWidget, {\n            isFetching: false,\n            error: action.payload\n          })\n        })\n      });\n\n    case SET_TABS_START:\n      return _objectSpread({}, state, {\n        tabs: {\n          activeTabs: action.payload,\n          isFetching: true,\n          error: null\n        }\n      });\n\n    case SET_TABS_SUCCESS:\n      return _objectSpread({}, state, {\n        tabs: _objectSpread({}, state.tabs, {\n          isFetching: false,\n          error: null\n        })\n      });\n\n    case SET_TABS_FAILURE:\n      return _objectSpread({}, state, {\n        tabs: {\n          activeTabs: action.payload,\n          isFetching: false,\n          error: null //idec\n\n        }\n      });\n    // Yelp Business Search\n\n    case FETCH_BUSINESS_START:\n      return _objectSpread({}, state, {\n        searchResults: _objectSpread({}, state.searchResults, {\n          isFetching: true,\n          error: null\n        })\n      });\n\n    case FETCH_BUSINESS_SUCCESS:\n      console.log(\"FETCH SUCCESS! Payload:\", action.payload);\n      return _objectSpread({}, state, {\n        searchResults: _objectSpread({}, state.searchResults, {\n          isFetching: false,\n          // data: action.payload\n          data: action.payload,\n          error: null\n        })\n      });\n\n    case FETCH_BUSINESS_FAILURE:\n      return _objectSpread({}, state, {\n        searchResults: _objectSpread({}, state.searchResults, {\n          isFetching: false,\n          error: action.payload\n        })\n      });\n    // Select business\n\n    case SELECT_BUSINESS_START:\n      return _objectSpread({}, state, {\n        currentlySelectedBusiness: _objectSpread({}, action.payload) //set data immediatly (missing data that we're waiting on Yelp for)\n\n      });\n\n    case SELECT_BUSINESS_SUCCESS:\n      return _objectSpread({}, state, {\n        currentlySelectedBusiness: _objectSpread({}, action.payload) //fill in the new address, rating and review count info\n\n      });\n\n    case SELECT_BUSINESS_FAILURE:\n      return _objectSpread({}, state, {\n        currentlySelectedBusiness: _objectSpread({}, action.payload) //revert back to old data\n\n      });\n    //adding businesses to user's owned businesses list\n\n    case ADD_BUSINESS_START:\n      console.log(\"ADDDDDDD BUSINESSS STARTTT\");\n      return _objectSpread({}, state, {\n        userBusinesses: _objectSpread({}, state.userBusinesses, {\n          isSetting: true,\n          error: null\n        })\n      });\n\n    case ADD_BUSINESS_SUCCESS:\n      return _objectSpread({}, state, {\n        userBusinesses: {\n          businesses: action.payload.businesses.map(business => {\n            return {\n              id: business.id,\n              businessId: business.yelp_id,\n              //default tab selected by default\n              // for side bar\n              businessName: business.name,\n              businessImg: business.image_url,\n              // for top-of-page info cards\n              reviewCount: 0,\n              averageRating: 0,\n              changeInRating: \"\"\n            };\n          }),\n          isSetting: false,\n          error: null\n        }\n      });\n\n    case ADD_BUSINESS_FAILURE:\n      return _objectSpread({}, state, {\n        userBusinesses: _objectSpread({}, state.userBusinesses, {\n          isSetting: false,\n          error: action.payload\n        })\n      });\n    //removing businesses from user's owned businesses list\n\n    case REMOVE_BUSINESS_START:\n      return _objectSpread({}, state, {\n        userBusinesses: _objectSpread({}, state.userBusinesses, {\n          isSetting: true,\n          error: null\n        })\n      });\n\n    case REMOVE_BUSINESS_SUCCESS:\n      return _objectSpread({}, state, {\n        userBusinesses: {\n          businesses: action.payload.businesses.map(business => {\n            return {\n              id: business.id,\n              businessId: business.yelp_id,\n              //default tab selected by default\n              // for side bar\n              businessName: business.name,\n              businessImg: business.image_url,\n              // for top-of-page info cards\n              reviewCount: 0,\n              averageRating: 0,\n              changeInRating: \"\"\n            };\n          }),\n          isSetting: false,\n          error: null\n        }\n      });\n\n    case REMOVE_BUSINESS_FAILURE:\n      return _objectSpread({}, state, {\n        userBusinesses: _objectSpread({}, state.userBusinesses, {\n          isSetting: false,\n          error: action.payload\n        })\n      });\n    //adding competitors to user's competitor list\n\n    case ADD_COMPETITOR_START:\n      return _objectSpread({}, state, {\n        competitors: _objectSpread({}, state.competitors, {\n          isSetting: true,\n          error: null\n        })\n      });\n\n    case ADD_COMPETITOR_SUCCESS:\n      return _objectSpread({}, state, {\n        competitors: {\n          businesses: action.payload.favorites.map(business => {\n            return {\n              id: business.id,\n              businessId: business.yelp_id,\n              //default tab selected by default\n              // for side bar\n              businessName: business.name,\n              businessImg: business.image_url,\n              // for top-of-page info cards\n              reviewCount: 0,\n              averageRating: 0,\n              changeInRating: \"\"\n            };\n          }),\n          isSetting: false,\n          error: null\n        }\n      });\n\n    case ADD_COMPETITOR_FAILURE:\n      return _objectSpread({}, state, {\n        competitors: _objectSpread({}, state.competitors, {\n          isSetting: false,\n          error: action.payload\n        })\n      });\n    //removing competitors from user's competitor list\n\n    case REMOVE_COMPETITOR_START:\n      return _objectSpread({}, state, {\n        competitors: _objectSpread({}, state.competitors, {\n          isSetting: true,\n          error: null\n        })\n      });\n\n    case REMOVE_COMPETITOR_SUCCESS:\n      return _objectSpread({}, state, {\n        competitors: {\n          businesses: action.payload.favorites.map(business => {\n            return {\n              id: business.id,\n              businessId: business.yelp_id,\n              //default tab selected by default\n              // for side bar\n              businessName: business.name,\n              businessImg: business.image_url,\n              // for top-of-page info cards\n              reviewCount: 0,\n              averageRating: 0,\n              changeInRating: \"\"\n            };\n          }),\n          isSetting: false,\n          error: null\n        }\n      });\n\n    case REMOVE_COMPETITOR_FAILURE:\n      return _objectSpread({}, state, {\n        competitors: _objectSpread({}, state.competitors, {\n          isSetting: false,\n          error: action.payload\n        })\n      });\n\n    case SET_ACTIVE_WIDGETS:\n      return _objectSpread({}, state, {\n        activeWidgets: action.payload\n      });\n    // TopBottomWords\n\n    case FETCH_TOP_AND_BOTTOM_START:\n      console.log(\"Fetch top and bottom words start..\");\n      return _objectSpread({}, state, {\n        widgetData: _objectSpread({}, state.widgetData, {\n          keyWords: _objectSpread({}, state.widgetData.keyWords, {\n            isFetching: true,\n            error: null\n          })\n        })\n      });\n\n    case FETCH_TOP_AND_BOTTOM_SUCCESS:\n      console.log(\"Successfully fetched top and bottom ten words:\\n\", action.payload);\n      return _objectSpread({}, state, {\n        widgetData: _objectSpread({}, state.widgetData, {\n          keyWords: {\n            isFetching: false,\n            data: action.payload,\n            error: null\n          }\n        })\n      });\n\n    case FETCH_TOP_AND_BOTTOM_FAILURE:\n      console.log(\"Fetch top and bottom failure:\\n\", action.payload);\n      return _objectSpread({}, state, {\n        widgetData: _objectSpread({}, state.widgetData, {\n          keyWords: _objectSpread({}, state.widgetData.keyWords, {\n            isFetching: false,\n            error: action.payload\n          })\n        })\n      });\n\n    case GET_USER_DATA_START:\n      return _objectSpread({}, state, {\n        loggedInUser: _objectSpread({}, state.loggedInUser, {\n          isFetching: true\n        })\n      });\n\n    case GET_USER_DATA_SUCCESS:\n      // action.payload: {\n      //   favorites\n      //   loggedInUser\n      //   businessInfo\n      //   activeWidgets\n      // }\n      // //only set state if not null\n      // let tempFavorites = state.favorites.favorites;\n      // if(action.payload.favorites){\n      //   tempFavorites = action.payload.favorites;\n      // }\n      // let tempLoggedInUser = state.loggedInUser.data\n      // if(action.payload.loggedInUser){\n      //   tempLoggedInUser = action.payload.loggedInUser;\n      // }\n      // let tempBusinessInfo = state.businessInfo.businesses;\n      // if(action.payload.businessInfo){\n      //   tempBusinessInfo = action.payload.businessInfo;\n      // }\n      // let tempActiveWidgets = state.activeWidgets;\n      // if(action.payload.activeWidgets){\n      //   tempActiveWidgets = action.payload.activeWidgets;\n      // }\n      console.log(\"Mapping over competitors\", action.payload.competitors);\n      return _objectSpread({}, state, {\n        competitors: _objectSpread({}, state.competitors, {\n          businesses: action.payload.competitors.map(business => {\n            return {\n              //id: 16\n              // name: \"Cartel Coffee Lab\"\n              // city: \"Phoenix\"\n              // state: \"AZ\"\n              // yelp:\n              // yelp_id: \"j0_DUr3vBXY-JP-b0bf93A\"\n              // url: \"https://www.yelp.com/biz/cartel-coffee-lab-phoenix-2?adjust_creative=qO78hV4p7yy-o3z8K5osow&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=qO78hV4p7yy-o3z8K5osow\"\n              // image_url:\n              id: business.id,\n              businessId: business.yelp.yelp_id,\n              //default tab selected by default\n              // for side bar\n              businessName: business.name,\n              businessImg: business.yelp.image_url,\n              // for top-of-page info cards\n              reviewCount: 0,\n              averageRating: 0,\n              changeInRating: \"\"\n            };\n          }),\n          isSetting: false,\n          error: null\n        }),\n        loggedInUser: _objectSpread({}, state.loggedInUser, {\n          data: action.payload.loggedInUser,\n          isFetching: false\n        }),\n        userBusinesses: _objectSpread({}, state.userBusinesses, {\n          businesses: action.payload.businesses.map(business => {\n            return {\n              id: business.id,\n              businessId: business.yelp.yelp_id,\n              //default tab selected by default\n              // for side bar\n              businessName: business.name,\n              businessImg: business.yelp.image_url,\n              // for top-of-page info cards\n              reviewCount: 0,\n              averageRating: 0,\n              changeInRating: \"\"\n            };\n          }),\n          isSetting: false,\n          error: null\n        }),\n        activeWidgets: [widgets[0].name, widgets[1].name],\n        tabs: _objectSpread({}, state.tabs, {\n          activeTabs: action.payload.activeTabs\n        })\n      });\n\n    case UPDATE_LOGGED_IN_USER:\n      return _objectSpread({}, state, {\n        loggedInUser: _objectSpread({}, state.loggedInUser, {\n          shouldUpdate: action.payload\n        })\n      });\n    // Edit Account\n\n    case FETCH_EDITACCOUNT_START:\n      return _objectSpread({}, state, {\n        loggedInUser: _objectSpread({}, state.loggedInUser, {\n          isFetching: true,\n          error: null\n        })\n      });\n\n    case FETCH_EDITACCOUNT_SUCCESS:\n      //TODO: update activeWidgets with action.payload.preferences.widgets\n      return _objectSpread({}, state, {\n        loggedInUser: {\n          data: {\n            firstName: action.payload.first_name ? action.payload.first_name : state.loggedInUser.data.firstName,\n            lastName: action.payload.last_name_name ? action.payload.last_name : state.loggedInUser.data.lastName\n          },\n          isFetching: false,\n          error: null\n        }\n      });\n\n    case FETCH_EDITACCOUNT_FAILURE:\n      return _objectSpread({}, state, {\n        isFetching: false,\n        error: action.payload\n      });\n    // PhraseRank\n\n    case FETCH_WORDS_OVER_TIME_START:\n      return _objectSpread({}, state, {\n        widgetData: _objectSpread({}, state.widgetData, {\n          wordsOverTime: _objectSpread({}, state.widgetData.wordsOverTime, {\n            isFetching: true,\n            error: null\n          })\n        })\n      });\n\n    case FETCH_WORDS_OVER_TIME_SUCCESS:\n      return _objectSpread({}, state, {\n        widgetData: _objectSpread({}, state.widgetData, {\n          wordsOverTime: _objectSpread({}, state.widgetData.wordsOverTime, {\n            isFetching: false,\n            data: action.payload.data,\n            error: null\n          })\n        })\n      });\n\n    case FETCH_WORDS_OVER_TIME_FAILURE:\n      return _objectSpread({}, state, {\n        widgetData: _objectSpread({}, state.widgetData, {\n          wordsOverTime: _objectSpread({}, state.widgetData.wordsOverTime, {\n            isFetching: false,\n            error: action.payload\n          })\n        })\n      });\n    // ReviewFrequency\n\n    case FETCH_REVIEWS_OVER_TIME_START:\n      return _objectSpread({}, state, {\n        widgetData: _objectSpread({}, state.widgetData, {\n          reviewsOverTime: _objectSpread({}, state.widgetData.reviewsOverTime, {\n            isFetching: true,\n            error: null\n          })\n        })\n      });\n\n    case FETCH_REVIEWS_OVER_TIME_SUCCESS:\n      return _objectSpread({}, state, {\n        widgetData: _objectSpread({}, state.widgetData, {\n          reviewsOverTime: _objectSpread({}, state.widgetData.reviewsOverTime, {\n            isFetching: false,\n            data: action.payload.data\n          })\n        })\n      });\n\n    case FETCH_REVIEWS_OVER_TIME_FAILURE:\n      return _objectSpread({}, state, {\n        widgetData: _objectSpread({}, state.widgetData, {\n          reviewsOverTime: _objectSpread({}, state.widgetData.reviewsOverTime, {\n            isFetching: true,\n            data: null,\n            error: action.payload\n          })\n        })\n      });\n    // RatingOverTime\n\n    case FETCH_RATING_OVER_TIME_START:\n      return _objectSpread({}, state, {\n        widgetData: _objectSpread({}, state.widgetData, {\n          ratingOverTime: _objectSpread({}, state.widgetData.ratingOverTime, {\n            isFetching: true,\n            error: null\n          })\n        })\n      });\n\n    case FETCH_RATING_OVER_TIME_SUCCESS:\n      return _objectSpread({}, state, {\n        widgetData: _objectSpread({}, state.widgetData, {\n          ratingOverTime: _objectSpread({}, state.widgetData.ratingOverTime, {\n            isFetching: false,\n            data: action.payload.star_data,\n            error: null\n          })\n        })\n      });\n\n    case FETCH_RATING_OVER_TIME_FAILURE:\n      return _objectSpread({}, state, {\n        widgetData: _objectSpread({}, state.widgetData, {\n          ratingOverTime: _objectSpread({}, state.widgetData.ratingOverTime, {\n            isFetching: false,\n            error: action.payload\n          })\n        })\n      });\n    // Unknown action type (default)\n\n    default:\n      console.log(`\\nUnknown action type:\\n${action.type}`);\n      return _objectSpread({}, state);\n  }\n}\n\nexport default reducer;","map":{"version":3,"sources":["/Users/benkoehler/Desktop/Labs/tally-ai-fe/client/src/reducers/index.js"],"names":["FETCH_TOP_AND_BOTTOM_START","FETCH_TOP_AND_BOTTOM_SUCCESS","FETCH_TOP_AND_BOTTOM_FAILURE","UPDATE_LOGGED_IN_USER","GET_USER_DATA_SUCCESS","GET_USER_DATA_START","FETCH_EDITACCOUNT_START","FETCH_EDITACCOUNT_SUCCESS","FETCH_EDITACCOUNT_FAILURE","FETCH_WORDS_OVER_TIME_START","FETCH_WORDS_OVER_TIME_SUCCESS","FETCH_WORDS_OVER_TIME_FAILURE","FETCH_REVIEWS_OVER_TIME_START","FETCH_REVIEWS_OVER_TIME_SUCCESS","FETCH_REVIEWS_OVER_TIME_FAILURE","FETCH_RATING_OVER_TIME_START","FETCH_RATING_OVER_TIME_SUCCESS","FETCH_RATING_OVER_TIME_FAILURE","SET_ACTIVE_WIDGETS","SET_TABS_START","SET_TABS_SUCCESS","SET_TABS_FAILURE","FETCH_RADAR_START","FETCH_RADAR_SUCCESS","FETCH_RADAR_FAILURE","dummyWordsOverTime","dummyReviewsOverTime","widgets","initialState","loggedInUser","data","firstName","lastName","shouldUpdate","isFetching","error","searchResults","currentlySelectedBusiness","businessId","businessName","businessImg","reviewCount","averageRating","changeInRating","address","userBusinesses","isSetting","businesses","activeWidgets","name","tabs","activeTabs","widgetData","keyWords","positive","negative","wordsOverTime","reviewsOverTime","ratingOverTime","radarWidget","reducer","state","action","console","log","type","payload","FETCH_BUSINESS_START","FETCH_BUSINESS_SUCCESS","FETCH_BUSINESS_FAILURE","SELECT_BUSINESS_START","SELECT_BUSINESS_SUCCESS","SELECT_BUSINESS_FAILURE","ADD_BUSINESS_START","ADD_BUSINESS_SUCCESS","map","business","id","yelp_id","image_url","ADD_BUSINESS_FAILURE","REMOVE_BUSINESS_START","REMOVE_BUSINESS_SUCCESS","REMOVE_BUSINESS_FAILURE","ADD_COMPETITOR_START","competitors","ADD_COMPETITOR_SUCCESS","favorites","ADD_COMPETITOR_FAILURE","REMOVE_COMPETITOR_START","REMOVE_COMPETITOR_SUCCESS","REMOVE_COMPETITOR_FAILURE","yelp","first_name","last_name_name","last_name","star_data"],"mappings":"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","sourcesContent":["import {\n\n\n \n\n  // Data for TopBottomWords\n  FETCH_TOP_AND_BOTTOM_START,\n  FETCH_TOP_AND_BOTTOM_SUCCESS,\n  FETCH_TOP_AND_BOTTOM_FAILURE,\n\n  //flag user data to be updated, this will GET_USER_DATA if it needs to\n  UPDATE_LOGGED_IN_USER,\n\n  //get all the user's data from backend\n  GET_USER_DATA_SUCCESS,\n  GET_USER_DATA_START,\n\n  // Edit Account\n  FETCH_EDITACCOUNT_START,\n  FETCH_EDITACCOUNT_SUCCESS,\n  FETCH_EDITACCOUNT_FAILURE,\n  // Data for PhraseRank\n  FETCH_WORDS_OVER_TIME_START,\n  FETCH_WORDS_OVER_TIME_SUCCESS,\n  FETCH_WORDS_OVER_TIME_FAILURE,\n  // Data for ReviewFrequency\n  FETCH_REVIEWS_OVER_TIME_START,\n  FETCH_REVIEWS_OVER_TIME_SUCCESS,\n  FETCH_REVIEWS_OVER_TIME_FAILURE,\n  // Data for RatingOverTime\n  FETCH_RATING_OVER_TIME_START,\n  FETCH_RATING_OVER_TIME_SUCCESS,\n  FETCH_RATING_OVER_TIME_FAILURE,\n  SET_ACTIVE_WIDGETS,\n  SET_TABS_START,\n  SET_TABS_SUCCESS,\n  SET_TABS_FAILURE,\n\n  // SET_FAVORITES_START,\n  // SET_FAVORITES_SUCCESS,\n  // SET_FAVORITES_FAILURE,\n\n  // ADD_FAVORITE_START,\n  // ADD_FAVORITE_SUCCESS,\n  // ADD_FAVORITE_FAILURE,\n\n  // REMOVE_FAVORITE_START,\n  // REMOVE_FAVORITE_SUCCESS,\n  // REMOVE_FAVORITE_FAILURE\n  FETCH_RADAR_START,\n  FETCH_RADAR_SUCCESS,\n  FETCH_RADAR_FAILURE\n} from \"../actions/index.js\";\n\nimport dummyWordsOverTime from \"../dummyData/dummyWordsOverTime\";\nimport dummyReviewsOverTime from \"../dummyData/dummyReviewsOverTime\";\n\nimport { widgets } from \"../components/WidgetSystem/WidgetRegistry\";\n\nconst initialState = {\n  loggedInUser: {\n    data: {\n      firstName: null,\n      lastName: null\n    },\n    shouldUpdate: true,\n    isFetching: false,\n    error: null\n  },\n\n  searchResults: {\n    isFetching: false,\n    error: null,\n    data: null\n  },\n\n  //currently selected business, this is what the dashboard will always display\n  currentlySelectedBusiness: {\n    businessId: null, //default tab selected by default\n    // for side bar\n    businessName: null,\n    businessImg: null,\n    // for top-of-page info cards\n    reviewCount: 0,\n    averageRating: 0,\n    changeInRating: \"\",\n    address: \"\"\n  },\n\n  // the user's businesses that they own\n  userBusinesses: {\n    isSetting: false,\n    error: null,\n    businesses: [\n      // [{\n      //   businessId: \"jndajnsdj0202020\",\n      //   // for side bar\n      //   businessName: \"IOwnThisBusiness\",\n      //   businessImg: null,\n      //   // for top-of-page info cards\n      //   reviewCount: 0,\n      //   averageRating: 0,\n      //   changeInRating: \"\"\n      // }]\n    ]\n  },\n\n  \n  //Defaults to [widgets[0].name, widgets[1].name]. Later we can load some saved dashboard widgets from the db (should still have a default value here so they don't start out with an empty dashboard)\n  //Array order really matters with activeWidgets, since it determines in which order they'll render. When the user drags an element to a new position on the screen, we need to translate that position to array position\n  activeWidgets: [widgets[0].name, widgets[1].name],\n\n  //array of open tabs and the IDs of the businesses they display, anything that's not an actual business ID, like \"defaultTab\", will just be New Tabs.\n  //In this case we default to 1 open New Tab, this will be replaced if the user has any previously open tabs in their preferences from the database.\n  tabs: {\n    activeTabs: [{ businessId: \"defaultTab\" }], //isCompetitor used to color tab depending on if you own the business or if its a competitor\n    isFetching: false,\n    error: null\n  },\n\n  // Data for populating the visuals\n  widgetData: {\n    // TopBottomWords\n    keyWords: {\n      isFetching: false,\n      error: null,\n      data: {\n        positive: [],\n        negative: []\n      }\n    },\n    // PhraseRank\n    wordsOverTime: {\n      isFetching: false,\n      error: null,\n      data: null\n    },\n    // ReviewFrequency\n    reviewsOverTime: {\n      isFetching: false,\n      error: null,\n      data: null\n    },\n    // RatingOverTime\n    ratingOverTime: {\n      isFetching: false,\n      error: null,\n      data: null\n    },\n\n    radarWidget: {\n      isFetching: false,\n      error: null,\n      data: null\n    }\n  }\n};\n\nfunction reducer(state = initialState, action) {\n  console.log(\n    \"Reducer working, current action: \",\n    action.type,\n    \" Payload: \",\n    action.payload\n  );\n\n  //TODO: seperate this switch into multiple files, it's way too long\n  switch (action.type) {\n    case FETCH_RADAR_START:\n      return {\n        ...state,\n        widgetData: {\n          ...state.widgetData,\n          radarWidget: {\n            ...state.radarWidget,\n            isFetching: true,\n            error: null\n          }\n        }\n      };\n    case FETCH_RADAR_SUCCESS:\n      return {\n        ...state,\n        widgetData: {\n          ...state.widgetData,\n          radarWidget: {\n            isFetching: false,\n            error: null,\n            data: action.payload\n          }\n        }\n      };\n    case FETCH_RADAR_FAILURE:\n      return {\n        ...state,\n        widgetData: {\n          ...state.widgetData,\n          radarWidget: {\n            ...state.radarWidget,\n            isFetching: false,\n            error: action.payload\n          }\n        }\n      };\n    case SET_TABS_START:\n      return {\n        ...state,\n        tabs: {\n          activeTabs: action.payload,\n          isFetching: true,\n          error: null\n        }\n      };\n    case SET_TABS_SUCCESS:\n      return {\n        ...state,\n        tabs: {\n          ...state.tabs,\n          isFetching: false,\n          error: null\n        }\n      };\n    case SET_TABS_FAILURE:\n      return {\n        ...state,\n        tabs: {\n          activeTabs: action.payload,\n          isFetching: false,\n          error: null //idec\n        }\n      };\n\n    // Yelp Business Search\n    case FETCH_BUSINESS_START:\n      return {\n        ...state,\n        searchResults: {\n          ...state.searchResults,\n          isFetching: true,\n          error: null\n        }\n      };\n    case FETCH_BUSINESS_SUCCESS:\n      console.log(\"FETCH SUCCESS! Payload:\", action.payload);\n      return {\n        ...state,\n        searchResults: {\n          ...state.searchResults,\n          isFetching: false,\n          // data: action.payload\n          data: action.payload,\n          error: null\n        }\n      };\n    case FETCH_BUSINESS_FAILURE:\n      return {\n        ...state,\n        searchResults: {\n          ...state.searchResults,\n          isFetching: false,\n          error: action.payload\n        }\n      };\n\n    // Select business\n    case SELECT_BUSINESS_START:\n      return {\n        ...state,\n        currentlySelectedBusiness: { ...action.payload } //set data immediatly (missing data that we're waiting on Yelp for)\n      };\n    case SELECT_BUSINESS_SUCCESS:\n      return {\n        ...state,\n        currentlySelectedBusiness: { ...action.payload } //fill in the new address, rating and review count info\n      };\n    case SELECT_BUSINESS_FAILURE:\n      return {\n        ...state,\n        currentlySelectedBusiness: { ...action.payload } //revert back to old data\n      };\n\n    //adding businesses to user's owned businesses list\n    case ADD_BUSINESS_START:\n      console.log(\"ADDDDDDD BUSINESSS STARTTT\");\n      return {\n        ...state,\n        userBusinesses: {\n          ...state.userBusinesses,\n          isSetting: true,\n          error: null\n        }\n      };\n    case ADD_BUSINESS_SUCCESS:\n      return {\n        ...state,\n        userBusinesses: {\n          businesses: action.payload.businesses.map(business => {\n            return {\n              id: business.id,\n              businessId: business.yelp_id, //default tab selected by default\n              // for side bar\n              businessName: business.name,\n              businessImg: business.image_url,\n              // for top-of-page info cards\n              reviewCount: 0,\n              averageRating: 0,\n              changeInRating: \"\"\n            };\n          }),\n          isSetting: false,\n          error: null\n        }\n      };\n    case ADD_BUSINESS_FAILURE:\n      return {\n        ...state,\n        userBusinesses: {\n          ...state.userBusinesses,\n          isSetting: false,\n          error: action.payload\n        }\n      };\n\n    //removing businesses from user's owned businesses list\n    case REMOVE_BUSINESS_START:\n      return {\n        ...state,\n        userBusinesses: {\n          ...state.userBusinesses,\n          isSetting: true,\n          error: null\n        }\n      };\n\n    case REMOVE_BUSINESS_SUCCESS:\n      return {\n        ...state,\n        userBusinesses: {\n          businesses: action.payload.businesses.map(business => {\n            return {\n              id: business.id,\n              businessId: business.yelp_id, //default tab selected by default\n              // for side bar\n              businessName: business.name,\n              businessImg: business.image_url,\n              // for top-of-page info cards\n              reviewCount: 0,\n              averageRating: 0,\n              changeInRating: \"\"\n            };\n          }),\n          isSetting: false,\n          error: null\n        }\n      };\n    case REMOVE_BUSINESS_FAILURE:\n      return {\n        ...state,\n        userBusinesses: {\n          ...state.userBusinesses,\n          isSetting: false,\n          error: action.payload\n        }\n      };\n\n    //adding competitors to user's competitor list\n    case ADD_COMPETITOR_START:\n      return {\n        ...state,\n        competitors: {\n          ...state.competitors,\n          isSetting: true,\n          error: null\n        }\n      };\n    case ADD_COMPETITOR_SUCCESS:\n      return {\n        ...state,\n        competitors: {\n          businesses: action.payload.favorites.map(business => {\n            return {\n              id: business.id,\n              businessId: business.yelp_id, //default tab selected by default\n              // for side bar\n              businessName: business.name,\n              businessImg: business.image_url,\n              // for top-of-page info cards\n              reviewCount: 0,\n              averageRating: 0,\n              changeInRating: \"\"\n            };\n          }),\n          isSetting: false,\n          error: null\n        }\n      };\n    case ADD_COMPETITOR_FAILURE:\n      return {\n        ...state,\n        competitors: {\n          ...state.competitors,\n          isSetting: false,\n          error: action.payload\n        }\n      };\n\n    //removing competitors from user's competitor list\n    case REMOVE_COMPETITOR_START:\n      return {\n        ...state,\n        competitors: {\n          ...state.competitors,\n          isSetting: true,\n          error: null\n        }\n      };\n    case REMOVE_COMPETITOR_SUCCESS:\n      return {\n        ...state,\n        competitors: {\n          businesses: action.payload.favorites.map(business => {\n            return {\n              id: business.id,\n              businessId: business.yelp_id, //default tab selected by default\n              // for side bar\n              businessName: business.name,\n              businessImg: business.image_url,\n              // for top-of-page info cards\n              reviewCount: 0,\n              averageRating: 0,\n              changeInRating: \"\"\n            };\n          }),\n          isSetting: false,\n          error: null\n        }\n      };\n    case REMOVE_COMPETITOR_FAILURE:\n      return {\n        ...state,\n        competitors: {\n          ...state.competitors,\n          isSetting: false,\n          error: action.payload\n        }\n      };\n\n    case SET_ACTIVE_WIDGETS:\n      return {\n        ...state,\n        activeWidgets: action.payload\n      };\n\n    // TopBottomWords\n    case FETCH_TOP_AND_BOTTOM_START:\n      console.log(\"Fetch top and bottom words start..\");\n      return {\n        ...state,\n        widgetData: {\n          ...state.widgetData,\n          keyWords: {\n            ...state.widgetData.keyWords,\n            isFetching: true,\n            error: null\n          }\n        }\n      };\n    case FETCH_TOP_AND_BOTTOM_SUCCESS:\n      console.log(\n        \"Successfully fetched top and bottom ten words:\\n\",\n        action.payload\n      );\n      return {\n        ...state,\n        widgetData: {\n          ...state.widgetData,\n          keyWords: {\n            isFetching: false,\n            data: action.payload,\n            error: null\n          }\n        }\n      };\n    case FETCH_TOP_AND_BOTTOM_FAILURE:\n      console.log(\"Fetch top and bottom failure:\\n\", action.payload);\n      return {\n        ...state,\n        widgetData: {\n          ...state.widgetData,\n          keyWords: {\n            ...state.widgetData.keyWords,\n            isFetching: false,\n            error: action.payload\n          }\n        }\n      };\n\n    case GET_USER_DATA_START:\n      return {\n        ...state,\n        loggedInUser: {\n          ...state.loggedInUser,\n          isFetching: true\n        }\n      };\n    case GET_USER_DATA_SUCCESS:\n      // action.payload: {\n      //   favorites\n      //   loggedInUser\n      //   businessInfo\n      //   activeWidgets\n      // }\n\n      // //only set state if not null\n      // let tempFavorites = state.favorites.favorites;\n      // if(action.payload.favorites){\n      //   tempFavorites = action.payload.favorites;\n      // }\n\n      // let tempLoggedInUser = state.loggedInUser.data\n      // if(action.payload.loggedInUser){\n      //   tempLoggedInUser = action.payload.loggedInUser;\n      // }\n\n      // let tempBusinessInfo = state.businessInfo.businesses;\n      // if(action.payload.businessInfo){\n      //   tempBusinessInfo = action.payload.businessInfo;\n      // }\n\n      // let tempActiveWidgets = state.activeWidgets;\n      // if(action.payload.activeWidgets){\n      //   tempActiveWidgets = action.payload.activeWidgets;\n      // }\n\n      console.log(\"Mapping over competitors\", action.payload.competitors);\n      return {\n        ...state,\n        competitors: {\n          ...state.competitors,\n          businesses: action.payload.competitors.map(business => {\n            return {\n              //id: 16\n              // name: \"Cartel Coffee Lab\"\n              // city: \"Phoenix\"\n              // state: \"AZ\"\n              // yelp:\n              // yelp_id: \"j0_DUr3vBXY-JP-b0bf93A\"\n              // url: \"https://www.yelp.com/biz/cartel-coffee-lab-phoenix-2?adjust_creative=qO78hV4p7yy-o3z8K5osow&utm_campaign=yelp_api_v3&utm_medium=api_v3_business_search&utm_source=qO78hV4p7yy-o3z8K5osow\"\n              // image_url:\n              id: business.id,\n              businessId: business.yelp.yelp_id, //default tab selected by default\n              // for side bar\n              businessName: business.name,\n              businessImg: business.yelp.image_url,\n              // for top-of-page info cards\n              reviewCount: 0,\n              averageRating: 0,\n              changeInRating: \"\"\n            };\n          }),\n          isSetting: false,\n          error: null\n        },\n        loggedInUser: {\n          ...state.loggedInUser,\n          data: action.payload.loggedInUser,\n          isFetching: false\n        },\n        userBusinesses: {\n          ...state.userBusinesses,\n          businesses: action.payload.businesses.map(business => {\n            return {\n              id: business.id,\n              businessId: business.yelp.yelp_id, //default tab selected by default\n              // for side bar\n              businessName: business.name,\n              businessImg: business.yelp.image_url,\n              // for top-of-page info cards\n              reviewCount: 0,\n              averageRating: 0,\n              changeInRating: \"\"\n            };\n          }),\n          isSetting: false,\n          error: null\n        },\n        activeWidgets: [widgets[0].name, widgets[1].name],\n        tabs: {\n          ...state.tabs,\n          activeTabs: action.payload.activeTabs\n        }\n      };\n\n    case UPDATE_LOGGED_IN_USER:\n      return {\n        ...state,\n        loggedInUser: {\n          ...state.loggedInUser,\n          shouldUpdate: action.payload\n        }\n      };\n\n    // Edit Account\n    case FETCH_EDITACCOUNT_START:\n      return {\n        ...state,\n        loggedInUser: {\n          ...state.loggedInUser,\n          isFetching: true,\n          error: null\n        }\n      };\n    case FETCH_EDITACCOUNT_SUCCESS: //TODO: update activeWidgets with action.payload.preferences.widgets\n      return {\n        ...state,\n        loggedInUser: {\n          data: {\n            firstName: action.payload.first_name\n              ? action.payload.first_name\n              : state.loggedInUser.data.firstName,\n            lastName: action.payload.last_name_name\n              ? action.payload.last_name\n              : state.loggedInUser.data.lastName\n          },\n          isFetching: false,\n          error: null\n        }\n      };\n    case FETCH_EDITACCOUNT_FAILURE:\n      return {\n        ...state,\n        isFetching: false,\n        error: action.payload\n      };\n\n    // PhraseRank\n    case FETCH_WORDS_OVER_TIME_START:\n      return {\n        ...state,\n        widgetData: {\n          ...state.widgetData,\n          wordsOverTime: {\n            ...state.widgetData.wordsOverTime,\n            isFetching: true,\n            error: null\n          }\n        }\n      };\n    case FETCH_WORDS_OVER_TIME_SUCCESS:\n      return {\n        ...state,\n        widgetData: {\n          ...state.widgetData,\n\n          wordsOverTime: {\n            ...state.widgetData.wordsOverTime,\n            isFetching: false,\n            data: action.payload.data,\n            error: null\n          }\n        }\n      };\n    case FETCH_WORDS_OVER_TIME_FAILURE:\n      return {\n        ...state,\n        widgetData: {\n          ...state.widgetData,\n\n          wordsOverTime: {\n            ...state.widgetData.wordsOverTime,\n            isFetching: false,\n            error: action.payload\n          }\n        }\n      };\n\n    // ReviewFrequency\n    case FETCH_REVIEWS_OVER_TIME_START:\n      return {\n        ...state,\n        widgetData: {\n          ...state.widgetData,\n          reviewsOverTime: {\n            ...state.widgetData.reviewsOverTime,\n            isFetching: true,\n\n            error: null\n          }\n        }\n      };\n    case FETCH_REVIEWS_OVER_TIME_SUCCESS:\n      return {\n        ...state,\n        widgetData: {\n          ...state.widgetData,\n          reviewsOverTime: {\n            ...state.widgetData.reviewsOverTime,\n            isFetching: false,\n            data: action.payload.data\n          }\n        }\n      };\n    case FETCH_REVIEWS_OVER_TIME_FAILURE:\n      return {\n        ...state,\n        widgetData: {\n          ...state.widgetData,\n          reviewsOverTime: {\n            ...state.widgetData.reviewsOverTime,\n            isFetching: true,\n            data: null,\n            error: action.payload\n          }\n        }\n      };\n\n    // RatingOverTime\n    case FETCH_RATING_OVER_TIME_START:\n      return {\n        ...state,\n        widgetData: {\n          ...state.widgetData,\n          ratingOverTime: {\n            ...state.widgetData.ratingOverTime,\n            isFetching: true,\n            error: null\n          }\n        }\n      };\n    case FETCH_RATING_OVER_TIME_SUCCESS:\n      return {\n        ...state,\n        widgetData: {\n          ...state.widgetData,\n\n          ratingOverTime: {\n            ...state.widgetData.ratingOverTime,\n            isFetching: false,\n            data: action.payload.star_data,\n            error: null\n          }\n        }\n      };\n    case FETCH_RATING_OVER_TIME_FAILURE:\n      return {\n        ...state,\n        widgetData: {\n          ...state.widgetData,\n\n          ratingOverTime: {\n            ...state.widgetData.ratingOverTime,\n            isFetching: false,\n            error: action.payload\n          }\n        }\n      };\n\n    // Unknown action type (default)\n    default:\n      console.log(`\\nUnknown action type:\\n${action.type}`);\n      return {\n        ...state\n      };\n  }\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}